local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
local currentLevel = require("levels.template")

function generateArea(self)
	local sliderPosition = go.get_position("/slider#sprite")
	local sliderSize = go.get("/slider#sprite", "size")
	local slidery0 = sliderPosition.y + (sliderSize.y / 2) - 75

	local sizeTetrisSlid = ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleSlid)* 3)
	
	currentLevel.platform.slider.y0 = slidery0
	currentLevel.platform.slider.y1 = slidery0 - sizeTetrisSlid

	local widthScreen = sliderSize.x
	currentLevel.platform.startSlider = (widthScreen - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleSlid) * 13)) / 2
	currentLevel.platform.intervalBlockSlid = ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleSlid) * 13) / 3

	currentLevel.platform.slider.sliderY = (currentLevel.platform.slider.y0 + currentLevel.platform.slider.y1) / 2
	for f = 1, #currentLevel.refBlock do
		local limitAreaX1 = (f * currentLevel.platform.intervalBlockSlid) + currentLevel.platform.startSlider
		local limitAreaX0 = limitAreaX1 - currentLevel.platform.intervalBlockSlid
		local originAreaX = limitAreaX0 + ((limitAreaX1 - limitAreaX0) / 2)
		
		currentLevel.refBlock[f].positionBlock.x = originAreaX
		currentLevel.refBlock[f].positionBlock.y = currentLevel.platform.slider.sliderY
		currentLevel.refBlock[f].positionBlock.z = 0.4

		currentLevel.refBlock[f].l1.x = limitAreaX1
		currentLevel.refBlock[f].l0.x = limitAreaX0

		currentLevel.refBlock[f].l0.y = currentLevel.platform.slider.y0
		currentLevel.refBlock[f].l1.y = currentLevel.platform.slider.y1

		currentLevel.refBlock[f].x0 = originAreaX - (sizeTetrisSlid / 2)
		currentLevel.refBlock[f].x1 = originAreaX + (sizeTetrisSlid / 2)
		currentLevel.refBlock[f].y0 = currentLevel.platform.slider.sliderY + (sizeTetrisSlid / 2)
		currentLevel.refBlock[f].y1 = currentLevel.platform.slider.sliderY - (sizeTetrisSlid / 2)

		currentLevel.refBlock[f].originXY.x = currentLevel.refBlock[f].x0
		currentLevel.refBlock[f].originXY.y = currentLevel.refBlock[f].y0
		
		if currentLevel.selectionBlock[f] and f < 4 then
			currentLevel.selectionBlock[f].selectionOriginX = currentLevel.refBlock[f].originXY.x
			currentLevel.selectionBlock[f].l1.x = limitAreaX1
			currentLevel.selectionBlock[f].l0.x = limitAreaX0

			local positionPointArea = vmath.vector3(originAreaX, currentLevel.platform.slider.sliderY, 0)
			currentLevel.selectionBlock[f].positionSelectionBlock = positionPointArea

			currentLevel.selectionBlock[f].l0.y = currentLevel.platform.slider.y0
			currentLevel.selectionBlock[f].l1.y = currentLevel.platform.slider.y1
			currentLevel.refBlock[f].isdisplaying = true
		end
		currentLevel.refBlock[f].factoryBlockId = factory.create("/square#block", nil, nil, { blockNumber = f, sliderPosition = sliderPosition }, nil)
		msg.post(currentLevel.refBlock[f].factoryBlockId, "initGenerateBlocks", { blockNumber = f, sliderPosition = sliderPosition })
	end
end

function attachedSelectionBlock(self, handle, time_elapsed)
	for g=1, #currentLevel.selectionBlock do
		for h=1, #currentLevel.refBlock do
			if currentLevel.selectionBlock[g].l1.x > currentLevel.refBlock[h].positionBlock.x 
			and currentLevel.selectionBlock[g].l0.x < currentLevel.refBlock[h].positionBlock.x 
			and currentLevel.refBlock[h].isActive
			and currentLevel.selectionBlock[g].selectionFactoryBlockId ~= currentLevel.refBlock[h].factoryBlockId then
				currentLevel.refBlock[h].isdisplaying = true
				currentLevel.selectionBlock[g].selectionFactoryBlockId = currentLevel.refBlock[h].factoryBlockId
				if g == 1 then
					currentLevel.platform.slidToRight = true
				end
			end
			if currentLevel.selectionBlock[3].l1.x < currentLevel.refBlock[h].positionBlock.x
			and currentLevel.refBlock[h].isdisplaying
			and currentLevel.refBlock[h].isActive then
				msg.post(currentLevel.refBlock[h].factoryTetrisId, "notDisplayblock", {blockNumber = currentLevel.refBlock[h].blockNumber})
			end
		end
	end
end

function getFirstLastInstanceSliding(self)
	local tableSlid = {}
	for h=1, #currentLevel.refBlock do
		if currentLevel.refBlock[h].isActive then
			table.insert(tableSlid, currentLevel.refBlock[h].factoryBlockId)
		end
	end
	currentLevel.platform.isLast = tableSlid[table.getn(tableSlid)]
	currentLevel.platform.isFirst = tableSlid[1]
end

function putAnimationInPlace(self, dir, avg)
	for u = 1, #currentLevel.blocks do
		if currentLevel.refBlock[u].isActive then
			msg.post(currentLevel.refBlock[u].factoryBlockId, "animate_slide_origin", { direction = dir, average = avg, duration = 0.5 })
			for b = 1, #currentLevel.blocks[u] do
				msg.post(currentLevel.blocks[u][b].blockId, "animate_slide", {direction = dir, average = avg, duration = 0.4 })
			end
		end
	end
end

function goToGoodPosition(self)
	local averagePosition = 0
	local direction = nil
	local totalSelection = 0

	local originX = nil
	local attachedBlockPosition = nil
	if currentLevel.platform.totalBlockAvailable >= 3 then
		totalSelection = 3
	end
	if currentLevel.platform.totalBlockAvailable == 2 then
		totalSelection = 2
	end
	if currentLevel.platform.totalBlockAvailable == 1 then
		totalSelection = 1
	end

	for h=1, totalSelection do
		originX = (currentLevel.selectionBlock[h].l1.x + currentLevel.selectionBlock[h].l0.x) / 2
		attachedBlockPosition = go.get_position(currentLevel.selectionBlock[h].selectionFactoryBlockId)

		if attachedBlockPosition.x - originX > 0 then
			direction = "TO_LEFT"
		end
		if attachedBlockPosition.x - originX < 0 then
			direction = "TO_RIGHT"
		end

		averagePosition = averagePosition + math.abs(attachedBlockPosition.x - originX)
		if h == totalSelection then
			putAnimationInPlace(self, direction, averagePosition)
		end
	end
end

function init(self)
	generateArea(self)
	timer.delay(1, false, attachedSelectionBlock)
	self.testdt = 1500
	self.postionTest = 0
	currentLevel.platform.numberBlock = 0
end

function final(self)
end

function update(self, dt)
	if currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone then
		for g=1, #currentLevel.selectionBlock do
			for h=1, #currentLevel.refBlock do
				if currentLevel.selectionBlock[g].l1.x > currentLevel.refBlock[h].positionBlock.x 
				and currentLevel.selectionBlock[g].l0.x < currentLevel.refBlock[h].positionBlock.x 
				and currentLevel.refBlock[h].isActive
				and currentLevel.selectionBlock[g].selectionFactoryBlockId ~= currentLevel.refBlock[h].factoryBlockId then
					currentLevel.selectionBlock[g].selectionFactoryBlockId = currentLevel.refBlock[h].factoryBlockId
				end
			end
		end
		getFirstLastInstanceSliding(self)
	end
	if currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone and not currentLevel.platform.slider.dragBlock and currentLevel.platform.slider.isSlideLeftRight and not currentLevel.platform.isDragUp then
		if currentLevel.platform.slider.directionSlider == -1 or currentLevel.platform.slider.directionSlider == 1 or
		(currentLevel.platform.slidToRight and currentLevel.platform.slider.directionSlider == -1) or
		(currentLevel.platform.slidToLeft and currentLevel.platform.slider.directionSlider == 1) then
			if currentLevel.platform.actionReleased and currentLevel.platform.averageSlid > 0 then
				local direction = nil
				if currentLevel.platform.slider.directionSlider == 1 then
					direction = "TO_RIGHT"
				end
				if currentLevel.platform.slider.directionSlider == -1 then
					direction = "TO_LEFT"
				end
				putAnimationInPlace(self, direction, currentLevel.platform.averageSlid)
				currentLevel.platform.actionReleased = false
				currentLevel.platform.slider.isSlideLeftRight = false
				currentLevel.platform.slider.directionSlider = 0
			end
		end
	end
end
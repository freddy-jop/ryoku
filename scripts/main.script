local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
--local list = require("ressources.listLevel")
--local currentLevel = list[config.level].path
local currentLevel = require("levels.template")
local squares = require("construct.conformation")
local groupColor = require("construct.groupsColors")
--https://defold.com/manuals/factory/
--https://paletton.com/#uid=15A0u0kictn8hMuduAjmcpgq0kQ
-- w: 1920 -- 640
-- h: 3408 -- 1136
-- local dataLevel = sys.load_resource("/ressources/data_level.lua")
-- local data = assert(loadstring(dataLevel))

-- https://defold.com/ref/beta/resource/#resource.load:path
-- https://defold.com/manuals/resource/
-- https://defold.com/ref/sys/#sys.load_resource
-- https://defold.com/manuals/file-access/
-- https://www.google.com/search?q=defold+custom+ressources+load+save+sys&oq=defold+custom+ressources+load+save+sys&aqs=chrome..69i57.20349j0j1&sourceid=chrome&ie=UTF-8
-- https://www.google.com/search?q=defold+resource.load()+data&oq=defold+resource.load()+data&aqs=chrome..69i57.7403j0j1&sourceid=chrome&ie=UTF-8

function selectConformation(squareSelected)
	local conformationList = squares.conformations
	for sc=1, #conformationList do
		local patternList = conformationList[sc].pattern
		for pt=1, #patternList do
			local conformationSelected = patternList[pt][1]
			local countSquare = 0
			if #squareSelected == 0 then
				return squares.default
			end
			for fix=1, #conformationSelected do
				for slot=1, #squareSelected do
					if squareSelected[slot][1] == conformationSelected[fix][1] and squareSelected[slot][2] == conformationSelected[fix][2] then
						countSquare = countSquare + 1
					end
				end
				if #conformationSelected == countSquare and #conformationSelected == #squareSelected and #squareSelected == countSquare then
					return conformationList[sc].name
				end
			end
		end
	end
end

function getAvailableBonusGroupById(self, targetlist, currentTile)
	local groupList = {}
	for q, coor in ipairs(targetlist) do
		if currentLevel.grid[currentTile.gdXY.y+coor[1]][currentTile.gdXY.x+coor[2]].groupId == currentLevel.grid[currentTile.gdXY.y][currentTile.gdXY.x].groupId then
			local coorSquare = {coor[1], coor[2]}
			table.insert(groupList, coorSquare)
		end
	end
	return groupList
end

function loadConformationBonusGroup(self, currentTile)
	if currentTile.gdXY.y == 1 and currentTile.gdXY.x == 1 then
		local topLeft = selectConformation(getAvailableBonusGroupById(self, squares.targets[1].topLeft, currentTile))
		return topLeft 
	end
	if currentTile.gdXY.y == 1 and currentTile.gdXY.x > 1 and currentTile.gdXY.x < currentLevel.platform.column then
		local topBorder = selectConformation(getAvailableBonusGroupById(self, squares.targets[5].topBorder, currentTile))
		return topBorder
	end
	if currentTile.gdXY.y > 1 and currentTile.gdXY.x == 1 and currentTile.gdXY.y < currentLevel.platform.column then
		local leftBorder = selectConformation(getAvailableBonusGroupById(self, squares.targets[8].leftBorder, currentTile))
		return leftBorder
	end
	if currentTile.gdXY.y == currentLevel.platform.column and currentTile.gdXY.x == 1 then
		local bottomLeft = selectConformation(getAvailableBonusGroupById(self, squares.targets[4].bottomLeft, currentTile))
		return bottomLeft
	end
	if currentTile.gdXY.y == 1 and currentTile.gdXY.x == currentLevel.platform.column then
		local topRight = selectConformation(getAvailableBonusGroupById(self, squares.targets[2].topRight, currentTile))
		return topRight
	end
	if currentTile.gdXY.y == currentLevel.platform.column and currentTile.gdXY.x > 1 and currentTile.gdXY.x < currentLevel.platform.column then
		local bottomBorder = selectConformation(getAvailableBonusGroupById(self, squares.targets[7].bottomBorder, currentTile))
		return bottomBorder
	end
	if currentTile.gdXY.y > 1 and currentTile.gdXY.x == currentLevel.platform.column and currentTile.gdXY.y < currentLevel.platform.column then
		local rightBorder = selectConformation(getAvailableBonusGroupById(self, squares.targets[6].rightBorder, currentTile))
		return rightBorder
	end
	if currentTile.gdXY.y == currentLevel.platform.column and currentTile.gdXY.x == currentLevel.platform.column then
		local bottomRight = selectConformation(getAvailableBonusGroupById(self, squares.targets[3].bottomRight, currentTile))
		return bottomRight
	end
	if currentTile.gdXY.y > 1 and currentTile.gdXY.x > 1 and currentTile.gdXY.x < currentLevel.platform.column and currentTile.gdXY.y < currentLevel.platform.column then
		local plain = selectConformation(getAvailableBonusGroupById(self, squares.targets[9].plain, currentTile))
		return plain
	end
end

function generateSupport(self)
	local sliderSize = go.get("/slider#sprite", "size")
	--local widthScreen = sys.get_config("display.width")
	local widthScreen = sliderSize.x
	local startWith = ((widthScreen - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.platform.column)) / 2) + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid)/2)
	local startHeight = currentLevel.platform.blockHeight + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.platform.column)
	
	currentLevel.platform.limitGrid.gridY0 = currentLevel.platform.blockHeight
	currentLevel.platform.limitGrid.gridY1 = startHeight
	currentLevel.platform.limitGrid.gridX0 = ((widthScreen - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.platform.column)) / 2)
	currentLevel.platform.limitGrid.gridX1 = ((widthScreen - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.platform.column)) / 2) + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.platform.column)
	
	for m = 1, #currentLevel.grid do
		for i = 1, #currentLevel.grid[m] do
			local x = startWith + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.grid[m][i].positionX)
			local y = startHeight - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * currentLevel.grid[m][i].positionY)

			currentLevel.grid[m][i].xy = vmath.vector3(x,y, 0.1)
			currentLevel.grid[m][i].x0 = x - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid)/2)
			currentLevel.grid[m][i].x1 = x + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid)/2)
			currentLevel.grid[m][i].y0 = y + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid)/2)
			currentLevel.grid[m][i].y1 = y - ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid)/2)
			if not currentLevel.grid[m][i].ispopulate then
				currentLevel.grid[m][i].isGrey = true
				if (currentLevel.grid[m][i].positionX + currentLevel.grid[m][i].positionY)%2 == 0 then
					currentLevel.grid[m][i].color = currentLevel.platform.grey.light
				else
					currentLevel.grid[m][i].color = currentLevel.platform.grey.dark
				end
			end

			if i == 1 and m == 1 then
				currentLevel.platform.firstTileGrid = vmath.vector3(x,y, 0.1)
			end
			
			currentLevel.grid[m][i].gdXY = vmath.vector3(i, m, 0) 

			self.instanceId = factory.create("/level#plain", nil, nil, { tileposition = currentLevel.grid[m][i].gdXY, fullPosition = currentLevel.grid[m][i].xy }, currentLevel.platform.scaleGrid)
			currentLevel.grid[m][i].instanceId = self.instanceId

			currentLevel.grid[m][i].urlBorderGroup = msg.url(nil, self.instanceId, "border")
			msg.post(currentLevel.grid[m][i].urlBorderGroup, "enable")
			local conformationGroup = loadConformationBonusGroup(self, currentLevel.grid[m][i])
			if i == 11 and m == 8 then
				print("===> conformationGroup ::: ", conformationGroup)
			end
			msg.post(currentLevel.grid[m][i].urlBorderGroup, "play_animation", {id = hash(conformationGroup)})
			go.set(currentLevel.grid[m][i].urlBorderGroup, "tint", vmath.vector4(1, 1, 1, 0.2))
		end
	end
end

function initializeResult(self)
	for i = 1, #currentLevel.blocks do
		for k = 1, #currentLevel.blocks[i] do
			currentLevel.grid[currentLevel.blocks[i][k].result.tileY + 1][currentLevel.blocks[i][k].result.tileX + 1].blockNumber = currentLevel.blocks[i][k].blockNumber
		end
	end
end

function startTilePlaced(self)
	local currenttilePlaced = currentLevel.grid[self.startChallenge.y][self.startChallenge.x]

	local limitGrid = currentLevel.platform.column
	if currenttilePlaced.gdXY.y - 1 > 0 then
		if currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x].isGrey then
			local urlY1 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x].instanceId, "tiles")
			msg.post(urlY1, "initialize_adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x] })
		end
	end
	if currenttilePlaced.gdXY.y + 1 <= limitGrid then
		if currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x].isGrey then
			local urlY2 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x].instanceId, "tiles")
			msg.post(urlY2, "initialize_adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x] })
		end
	end
	if currenttilePlaced.gdXY.x - 1 > 0 then
		if currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1].isGrey then
			local urlX1 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1].instanceId, "tiles")
			msg.post(urlX1, "initialize_adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1] })
		end
	end
	if currenttilePlaced.gdXY.x + 1 <= limitGrid then
		if currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1].isGrey then
			local urlX2 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1].instanceId, "tiles")
			msg.post(urlX2, "initialize_adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1] })
		end
	end
end

function initializeBonusGrid(self)
	for m = 1, #currentLevel.grid do
		for i = 1, #currentLevel.grid[m] do
			if not currentLevel.grid[m][i].isGood and currentLevel.grid[m][i].isGrey then
				local scaleGrid = 0
				local color = 0
				if (currentLevel.grid[m][i].positionX + currentLevel.grid[m][i].positionY)%2 == 0 then
					scaleGrid = 0.9
					color = currentLevel.platform.grey.dark
				else
					scaleGrid = 1.1
					color = currentLevel.platform.grey.light
				end
				
				go.animate(currentLevel.grid[m][i].gridSpriteId, "scale", go.PLAYBACK_LOOP_PINGPONG, scaleGrid, go.EASING_INOUTQUART, 1, 0)
				go.animate(currentLevel.grid[m][i].gridSpriteId, "tint", go.PLAYBACK_LOOP_PINGPONG, color, go.EASING_INOUTQUART, 4, 0)
			end
		end
	end
end

function selectSquare(self, actionX, actionY)
	local squareList = {}
	for m = 1, #currentLevel.grid do
		for i = 1, #currentLevel.grid[m] do
			if not currentLevel.grid[m][i].isGood and currentLevel.grid[m][i].isGrey then
				if not (currentLevel.grid[m][i].x0 < actionX 
				and currentLevel.grid[m][i].x1 > actionX 
				and currentLevel.grid[m][i].y0 > actionY
				and  currentLevel.grid[m][i].y1 < actionY) then
					go.animate(currentLevel.grid[m][i].gridSpriteId, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTQUART, 1, 0)
					go.animate(currentLevel.grid[m][i].gridSpriteId, "tint", go.PLAYBACK_ONCE_FORWARD, currentLevel.grid[m][i].color, go.EASING_INOUTQUART, 1, 0)
				end
				if currentLevel.grid[m][i].x0 < actionX 
				and currentLevel.grid[m][i].x1 > actionX 
				and currentLevel.grid[m][i].y0 > actionY
				and  currentLevel.grid[m][i].y1 < actionY then
					table.insert(squareList, currentLevel.grid[m][i])
					go.animate(currentLevel.grid[m][i].gridSpriteId, "tint", go.PLAYBACK_ONCE_FORWARD, currentLevel.grid[m][i].color, go.EASING_INOUTQUART, 1, 0)
				end
			end
			if #currentLevel.grid == m  and #currentLevel.grid[m] == i then
				return squareList
			end
		end
	end
end

function showBonus(self, square, bonusName)
	local targetTile = msg.url(nil, square[1].instanceId, "tiles")
	msg.post(targetTile, bonusName, { tileBonus = square })
end

function finalizeLostLevel(self)
	for i = 1, #currentLevel.groups do
		local groupNumber = currentLevel.groups[i].number
		for m = 1, #currentLevel.grid do
			for i = 1, #currentLevel.grid[m] do
				local back = msg.url(nil, currentLevel.grid[m][i].instanceSquareId, "back")
				local front = msg.url(nil, currentLevel.grid[m][i].instanceSquareId, "front")
				-- if currentLevel.grid[m][i].conformationName ~= "SIMPLE" then
				-- 	msg.post(back, "play_animation", { id = hash("SIMPLE") })
				-- end
				-- if currentLevel.grid[m][i].isGood then
				-- 	go.animate(back, "tint", go.PLAYBACK_ONCE_FORWARD, currentLevel.platform.grey.bad, go.EASING_INSINE, 0.2, ((m+i)/10))
				-- 	if currentLevel.grid[m][i].revealed then
				-- 		go.animate(front, "tint", go.PLAYBACK_ONCE_FORWARD, currentLevel.platform.grey.bad, go.EASING_INSINE, 0.2, ((m+i)/10))
				-- 	end
				-- end
				if currentLevel.grid[m][i].isGood and currentLevel.grid[m][i].groupId == groupNumber then
					go.animate(back, "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[currentLevel.grid[m][i].groupId].groupColorId].firstColor, go.EASING_INSINE, 0.2, ((groupNumber*2)/10))
					if currentLevel.grid[m][i].revealed or currentLevel.grid[m][i].sudokuRevealed then
						go.animate(front, "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[currentLevel.grid[m][i].groupId].groupColorId].firstColor, go.EASING_INSINE, 0.2, ((groupNumber*2)/10))
					end
				end
			end
		end
	end
	
end

function countRevelatetile(self)
	local totalTile = 0
	for m = 1, #currentLevel.grid do
		for i = 1, #currentLevel.grid[m] do
			if currentLevel.grid[m][i].revealed or currentLevel.grid[m][i].sudokuRevealed then
				totalTile = totalTile + 1
			end
			if #currentLevel.grid == m and #currentLevel.grid[m] == i then
				return totalTile
			end
		end
	end
end

function pulseParticuleFinal(self)
	for caca = 1, #currentLevel.grid do
		for pipi = 1, #currentLevel.grid[caca] do
			local urlblockGroup = msg.url(nil, currentLevel.grid[caca][pipi].instanceSquareId, "square")
			msg.post(urlblockGroup, "pulse_particule_final", {tileMatch = currentLevel.grid[caca][pipi] })
		end
	end
end

function startSudokuBonus(listSquares)
	local saveSudokuBonus = sys.load(ryoku_path)
	if saveSudokuBonus.sudoku > 0 then
		saveSudokuBonus.sudoku = saveSudokuBonus.sudoku - 1
		if sys.save(ryoku_path, saveSudokuBonus) then
			msg.post("/powerup#powerup", "increment_sudoku")
			math.randomseed(os.time())
			local randomDoku = math.random(1, #listSquares)
			for u = 1, #currentLevel.blocks do
				for v = 1, #currentLevel.blocks[u] do
					if currentLevel.blocks[u][v].blockId == listSquares[randomDoku] then
						local front = msg.url(nil, currentLevel.blocks[u][v].blockId, "front")
						currentLevel.blocks[u][v].numberRevealed = true
						currentLevel.grid[currentLevel.blocks[u][v].result.tileY + 1][currentLevel.blocks[u][v].result.tileX + 1].sudokuRevealed = true
						msg.post(front, "enable")
						local scaleGrid = go.get_scale(front)
						go.set(front, "scale", vmath.vector3(scaleGrid.x/4, scaleGrid.y/4, 1))
						msg.post(front, "play_animation", {id = hash(string.upper(currentLevel.grid[currentLevel.blocks[u][v].result.tileY + 1][currentLevel.blocks[u][v].result.tileX + 1].number))})
						go.animate(front, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_OUTELASTIC, 0.8, 0, nil)
					end
					if #currentLevel.blocks == u and #currentLevel.blocks[u] == v then
						msg.post("/powerup#powerup", "manage_sudoku_counter")
					end
				end
			end
		end
	end
end

function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.949, 0.952, 0.956, 0) })
	--pprint("===> get_save_file :: ", sys.get_save_file("ryoku", "ryoku_config"))
	self.tickInit = 0
	self.tickRoundedInit = 0
	if config.level == 1 then
		self.startChallenge = vmath.vector3(currentLevel.platform.startChallenge[1][1], currentLevel.platform.startChallenge[1][2], 0)
	else
		self.startChallenge = vmath.vector3(currentLevel.platform.startChallenge[currentLevel.platform.randomChallenge][1], currentLevel.platform.startChallenge[currentLevel.platform.randomChallenge][2], 0)
	end
	generateSupport(self)
	initializeResult(self)
	currentLevel.platform.initialManageTarget = true
	self.finalizeLostLevel = false
	self.restartInit = 0
	self.restartRoundedInit = 0
	self.intializeParticulePulse = false
	self.startInitilizeLevel = false
	msg.post(".", "acquire_input_focus")
	
	if config.level == 1 then
		local getResetTuto = sys.load(ryoku_path)
		if config.pendingTuto and config.scrollVerticale and not config.scrollHorizontale then
			getResetTuto.scrollVerticale = false
			getResetTuto.scrollHorizontale = true
		end
		if sys.save(ryoku_path, getResetTuto) then
			local getForStartTuto = sys.load(ryoku_path)
			if getForStartTuto.pendingTuto and getForStartTuto.scrollHorizontale and not getForStartTuto.scrollVerticale then
				currentLevel.platform.stopGame = true
				--START TUTO POPUP SERIES
				msg.post("/tuto#tuto", "start_tuto")
			end
		end
	end
	msg.post("/powerup#powerup", "manage_sudoku_counter")
end

function final(self)
end

function unload(self)
end

function update(self, dt)
	if not currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone then
		self.restartInit = 0
		self.restartRoundedInit = 0
	end
	if currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone then
		self.restartInit = self.restartInit + dt
		self.restartRoundedInit = math.floor(self.restartInit * 1000)
	end
	if self.restartRoundedInit >= 2000 and currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone then
		currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = false
		self.restartInit = 0
		self.restartRoundedInit = 0
	end
	if currentLevel.platform.initialManageTarget then
		self.tickInit = self.tickInit + dt
		self.tickRoundedInit = math.floor(self.tickInit)
	end
	if self.tickRoundedInit >= 1 and not self.startInitilizeLevel then
		
		self.startInitilizeLevel = true
		--currentLevel.platform.initialManageTarget = false
		startTilePlaced(self)
	end
	
	if self.tickRoundedInit >= 3 and currentLevel.platform.initialManageTarget then
		self.tickRoundedInit = 0
		self.tickInit = 0
		currentLevel.platform.initialManageTarget = false
	end
	if not self.finalizeLostLevel and currentLevel.platform.actionLostLevel and not currentLevel.platform.isBlockMatch then
		self.finalizeLostLevel = true
		currentLevel.platform.stopGame = true
		msg.post("/life#life", "increment_life", { value = -1 })
		
		finalizeLostLevel(self)
		timer.delay(((currentLevel.platform.column * 2)/10) + 1, false, function() 
			msg.post("/life#life", "display_option_lost")
		end)
	end
	-- if currentLevel.platform.actionLostLevel and not currentLevel.platform.isBlockMatch then
	-- 	self.tickInit = self.tickInit + dt
	-- 	self.tickRoundedInit = math.floor(self.tickInit * 1000)
	-- end
	-- if self.tickRoundedInit >= 2000 and currentLevel.platform.actionLostLevel then
	-- 	currentLevel.platform.actionLostLevel = false
	-- 	self.tickRoundedInit = 0
	-- 	self.tickInit = 0
	-- 	--currentLevel.blocks = {}
	-- 	msg.post("controller:/loader#controller", "changeScene", { newScene = "restartLevel" })
	-- end

	if currentLevel.platform.totalGroupDisplaying == currentLevel.platform.column then
		local finalizeTotaletile = countRevelatetile(self)
		if finalizeTotaletile == (currentLevel.platform.column * currentLevel.platform.column) and not self.intializeParticulePulse then
			pulseParticuleFinal(self)
			self.intializeParticulePulse = true
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("initialize_bonus") then
		currentLevel.platform.bonusName = message.bonusName
		initializeBonusGrid(self)
	end
	if message_id == hash("run_sudoku_bonus") then
		local listSquareDisplaying = {}
		for i = 1, #currentLevel.refBlock do
			if currentLevel.refBlock[i].isdisplaying and currentLevel.refBlock[i].isActive then
				for k = 1, #currentLevel.blocks[i] do
					if not currentLevel.blocks[i][k].numberRevealed and not currentLevel.blocks[i][k].isColored then
						table.insert(listSquareDisplaying, currentLevel.blocks[i][k].blockId)
					end
				end	
			end
			if #currentLevel.refBlock == i then
				if #listSquareDisplaying == 0 then
					msg.post("/powerup#powerup", "not_have_place")
				end
				if #listSquareDisplaying > 0 then
					startSudokuBonus(listSquareDisplaying)
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	if action.pressed and currentLevel.platform.bonusName ~= "" then
		local square = selectSquare(self, action.x, action.y)
		if #square == 1 then
			if currentLevel.platform.bonusName == "adjacent_bonus"
			or currentLevel.platform.bonusName == "target_bonus"
			or currentLevel.platform.bonusName == "group_bonus" then
				showBonus(self, square, currentLevel.platform.bonusName)
				currentLevel.platform.bonusName = ""
			end
		elseif #square > 1 then
			for l = 1, #square do
				for i = 1, #square[l] do
					go.animate(square[l][i].gridSpriteId, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTQUART, 1, 0)
					go.animate(square[l][i].gridSpriteId, "tint", go.PLAYBACK_ONCE_FORWARD, square[l][i].color, go.EASING_INOUTQUART, 1, 0)
				end
			end
			currentLevel.platform.bonusName = ""
		else
			currentLevel.platform.bonusName = ""
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
--local list = require("ressources.listLevel")
--local currentLevel = list[config.level].path
local currentLevel = require("levels.template")
local groupColor = require("construct.groupsColors")
go.property("block", 0)
go.property("tileNumber", 0)
go.property("positionTileBlock", vmath.vector3())

function getMatchTileObject(self)
	for t = 1, #currentLevel.grid do
		for g = 1, #currentLevel.grid[t] do
			if currentLevel.grid[t][g].instanceId == self.instanceCollisionTile then
				return currentLevel.grid[t][g]
			end
		end
	end
end

function getMatchCurrentTile(self)
	for t = 1, #currentLevel.grid do
		for g = 1, #currentLevel.grid[t] do
			if currentLevel.grid[t][g].instanceId == currentLevel.blocks[self.block][self.tileNumber].instanceId then
				return currentLevel.grid[t][g]
			end
		end
	end
end

function showAdjacentTilePlaced(self, url, property)
	self.collisionTileObject = getMatchCurrentTile(self)
	if self.collisionTileObject then
		local currenttilePlaced = currentLevel.grid[self.collisionTileObject.gdXY.y][self.collisionTileObject.gdXY.x]
		local limitGrid = currentLevel.platform.column
		if currenttilePlaced.gdXY.y - 1 > 0 then
			if currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x].isGrey then
				local urlY1 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x].instanceId, "tiles")
				msg.post(urlY1, "adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y - 1][currenttilePlaced.gdXY.x] })
			end
		end
		if currenttilePlaced.gdXY.y + 1 <= limitGrid then
			if currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x].isGrey then
				local urlY2 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x].instanceId, "tiles")
				msg.post(urlY2, "adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y + 1][currenttilePlaced.gdXY.x] })
			end
		end
		if currenttilePlaced.gdXY.x - 1 > 0 then
			if currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1].isGrey then
				local urlX1 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1].instanceId, "tiles")
				msg.post(urlX1, "adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x - 1] })
			end
		end
		if currenttilePlaced.gdXY.x + 1 <= limitGrid then
			if currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1].groupId == currenttilePlaced.groupId and currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1].isGrey then
				local urlX2 = msg.url(nil, currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1].instanceId, "tiles")
				msg.post(urlX2, "adjacent_tile_locked", { tileObject = currentLevel.grid[currenttilePlaced.gdXY.y][currenttilePlaced.gdXY.x + 1] })
			end
		end
	end
end

function setRevelation(self, url, property)
	currentLevel.grid[currentLevel.blocks[self.block][self.tileNumber].result.tileY + 1][currentLevel.blocks[self.block][self.tileNumber].result.tileX + 1].revealed = true
end

function closureParticule(self, url, property)
	local targetParticule = msg.url(nil, currentLevel.grid[currentLevel.blocks[self.block][self.tileNumber].result.tileY + 1][currentLevel.blocks[self.block][self.tileNumber].result.tileX + 1].instanceSquareId, "conforFx")
	particlefx.set_constant(targetParticule, "emitter", "tint", groupColor[currentLevel.groups[currentLevel.grid[currentLevel.blocks[self.block][self.tileNumber].result.tileY + 1][currentLevel.blocks[self.block][self.tileNumber].result.tileX + 1].groupId].groupColorId].colorBrique)
	particlefx.play(targetParticule)
	if currentLevel.blocks[self.block][self.tileNumber].result.tileY + 1 == currentLevel.platform.column and 
	currentLevel.blocks[self.block][self.tileNumber].result.tileX + 1 == currentLevel.platform.column then
		currentLevel.platform.finaliseNextLevel = true
	end
end

function reinitializeSelectionBlock(self)
	
	for g=1, #currentLevel.selectionBlock do
		if currentLevel.selectionBlock[g].l1.x > currentLevel.refBlock[self.block].positionBlock.x 
		and currentLevel.selectionBlock[g].l0.x < currentLevel.refBlock[self.block].positionBlock.x 
		and currentLevel.refBlock[self.block].isActive
		and currentLevel.selectionBlock[g].selectionFactoryBlockId ~= currentLevel.refBlock[self.block].factoryBlockId then
			currentLevel.selectionBlock[g].selectionFactoryBlockId = currentLevel.refBlock[self.block].factoryBlockId
		end
	end
	if currentLevel.selectionBlock[1].selectionFactoryBlockId == currentLevel.platform.isFirst then
		currentLevel.platform.slidToRight = true
		currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = false
	else
		currentLevel.platform.slidToRight = false
	end
	if currentLevel.selectionBlock[3].selectionFactoryBlockId == currentLevel.platform.isLast then
		currentLevel.platform.slidToLeft = true
		currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = false
	else
		currentLevel.platform.slidToLeft = false
	end
end

function reinitializeFlagSlide(self, url, property)
	local increment = 0
	for b=1, #currentLevel.refBlock do
		if currentLevel.refBlock[b].isActive then
			increment = increment + 1
			if increment == 1 then
				currentLevel.selectionBlock[increment].limitBlockId = currentLevel.refBlock[b].factoryBlockId
			end
			if increment == currentLevel.platform.totalBlockAvailable then
				if currentLevel.platform.totalBlockAvailable >= 3 then
					currentLevel.selectionBlock[3].limitBlockId = currentLevel.refBlock[b].factoryBlockId
				end
				if currentLevel.platform.totalBlockAvailable == 2 then
					currentLevel.selectionBlock[2].limitBlockId = currentLevel.refBlock[b].factoryBlockId
				end
				if currentLevel.platform.totalBlockAvailable == 1 then
					currentLevel.selectionBlock[1].limitBlockId = currentLevel.refBlock[b].factoryBlockId
				end
			end
		end
	end
	reinitializeSelectionBlock(self)
	currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = false
	currentLevel.platform.processing = true
end

function init(self)
	msg.post(".", "acquire_input_focus")
	local tileBlock = currentLevel.blocks[self.block][self.tileNumber]
	--msg.post("#back", "play_animation", {id = hash("SIMPLE")})
	--msg.post("#front", "disable")
	self.has_child = true
	self.urlCollisionTile = nil
	self.instanceCollisionTile = nil
	self.collisionTileObject = nil
	go.set_position(self.positionTileBlock)
end

function final(self)
	go.delete(currentLevel.blocks[self.block][self.tileNumber].blockId)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if currentLevel.platform.isDragUp and currentLevel.platform.numberDrag == currentLevel.blocks[self.block][self.tileNumber].blockNumber then
		local scaleSquare = go.get_scale(currentLevel.blocks[self.block][self.tileNumber].blockId)
		currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x = currentLevel.refBlock[self.block].originXY.x + ((currentLevel.platform.sizeSquare * scaleSquare.x) / 2) + ((currentLevel.platform.sizeSquare * scaleSquare.x) * currentLevel.blocks[self.block][self.tileNumber].blockX)
		currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.y = currentLevel.refBlock[self.block].originXY.y - ((currentLevel.platform.sizeSquare * scaleSquare.x) / 2) - ((currentLevel.platform.sizeSquare * scaleSquare.x) * currentLevel.blocks[self.block][self.tileNumber].blockY)
		local positionTileBlock = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock
		positionTileBlock.z = 1
		go.set_position(positionTileBlock)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("return_in_placed") and  message.returnBlockId then
		currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x = currentLevel.blocks[self.block][self.tileNumber].positionReturn.x
		currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.y = currentLevel.blocks[self.block][self.tileNumber].positionReturn.y
		currentLevel.blocks[self.block][self.tileNumber].positionPlaned.x = 0
		currentLevel.blocks[self.block][self.tileNumber].positionPlaned.y = 0
		
		go.set_position(currentLevel.blocks[self.block][self.tileNumber].positionReturn, message.returnBlockId)
	end
	if message_id == hash("placed_part_block") and message.managedBlockId then
		self.collisionTileObject = getMatchCurrentTile(self)
		currentLevel.blocks[self.block][self.tileNumber].positionPlaned.z = 0.8
		currentLevel.grid[self.collisionTileObject.gdXY.y][self.collisionTileObject.gdXY.x].blockNumber = currentLevel.blocks[self.block][self.tileNumber].blockNumber
		go.set_position(currentLevel.blocks[self.block][self.tileNumber].positionPlaned, currentLevel.blocks[self.block][self.tileNumber].blockId)
		self.urlCollisionTile = msg.url(nil, currentLevel.blocks[self.block][self.tileNumber].instanceId, "tiles")
		msg.post(self.urlCollisionTile, "disable_tile_hover_collision", { block = self.block, tilenumber = self.tileNumber})
		if currentLevel.platform.isBlockMatch then
		--if currentLevel.blocks[self.block][self.tileNumber].isMatch then
			currentLevel.grid[self.collisionTileObject.gdXY.y][self.collisionTileObject.gdXY.x].instanceSquareId = currentLevel.blocks[self.block][self.tileNumber].blockId
			local initializeTile = msg.url(nil, currentLevel.grid[self.collisionTileObject.gdXY.y][self.collisionTileObject.gdXY.x].instanceId, "tiles")
			msg.post(initializeTile, "initialize_tile")
			
			go.animate("#back", "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[currentLevel.grid[currentLevel.blocks[self.block][self.tileNumber].result.tileY + 1][currentLevel.blocks[self.block][self.tileNumber].result.tileX + 1].groupId].groupColorId].colorBrique, go.EASING_INSINE, 0.15, 0, showAdjacentTilePlaced)
			if currentLevel.grid[self.collisionTileObject.gdXY.y][self.collisionTileObject.gdXY.x].revealed then
				go.animate("#front", "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[currentLevel.grid[currentLevel.blocks[self.block][self.tileNumber].result.tileY + 1][currentLevel.blocks[self.block][self.tileNumber].result.tileX + 1].groupId].groupColorId].colorBrique, go.EASING_INSINE, 0.15, 0)
			end
		else
			currentLevel.blocks[self.block][self.tileNumber].isColored = false
			go.animate("#back", "tint", go.PLAYBACK_ONCE_FORWARD, currentLevel.platform.grey.bad, go.EASING_INSINE, 0.15, 0)
		end
		self.collisionTileObject = nil
	end
	if message_id == hash("revelation_block_with_tile") then
		
		go.animate("#back", "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[currentLevel.grid[message.currentBlock.result.tileY + 1][message.currentBlock.result.tileX + 1].groupId].groupColorId].colorBrique, go.EASING_INSINE, 0.15, 0)
		if currentLevel.grid[message.tileAssocied.gdXY.y][message.tileAssocied.gdXY.x].revealed then
			go.animate("#front", "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[currentLevel.grid[message.currentBlock.result.tileY + 1][message.currentBlock.result.tileX + 1].groupId].groupColorId].colorBrique, go.EASING_INSINE, 0.15, 0)
		end
	end

	if message_id == hash("initialize_revelation_block_with_tile") then
		go.set("#back", "tint", groupColor[currentLevel.groups[currentLevel.grid[message.initializeCurrentBlock.result.tileY + 1][message.initializeCurrentBlock.result.tileX + 1].groupId].groupColorId].colorBrique)
		--go.animate("#back", "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[message.initializeCurrentBlock.groupId].groupColorId].colorBrique, go.EASING_INSINE, 0, 0)
		if currentLevel.grid[message.initializeTileAssocied.gdXY.y][message.initializeTileAssocied.gdXY.x].revealed then
			go.set("#front", "tint", groupColor[currentLevel.groups[currentLevel.grid[message.initializeCurrentBlock.result.tileY + 1][message.initializeCurrentBlock.result.tileX + 1].groupId].groupColorId].colorBrique)
			--go.animate("#front", "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[message.initializeCurrentBlock.groupId].groupColorId].colorBrique, go.EASING_INSINE, 0, 0)
		end
	end

	if message_id == hash("hide_block_with_tile") then
		go.animate("#back", "tint", go.PLAYBACK_ONCE_FORWARD, currentLevel.platform.initialColor, go.EASING_INSINE, 0.1, 0)
	end
	if message_id == hash("display_group_number") then
		if not message.tileMatch.revealed then
			local front = msg.url(nil, message.tileMatch.instanceSquareId, "front")
			----currentLevel.groups[message.tileMatch.groupId].colorBrique.w = 0
			--currentLevel.grid[message.tileMatch.gdXY.y][message.tileMatch.gdXY.x].revealed = true
			msg.post(front, "enable")
			----go.set(front, "tint.w", currentLevel.groups[message.tileMatch.groupId].colorBrique)
			go.set(front, "tint.w", 0)
			local scaleGrid = go.get_scale(front)
			go.set(front, "scale", vmath.vector3(scaleGrid.x/2, scaleGrid.y/2, 1))
			msg.post(front, "play_animation", {id = hash(string.upper(message.tileMatch.number))})
			go.animate(front, "tint", go.PLAYBACK_ONCE_FORWARD, groupColor[currentLevel.groups[message.tileMatch.groupId].groupColorId].colorBrique, go.EASING_INSINE, 0.2, (((message.tileMatch.positionX+1)+(message.tileMatch.positionY+1))/10))
			go.animate(front, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_OUTELASTIC, 0.8, (((message.tileMatch.positionX+1)+(message.tileMatch.positionY+1))/10), setRevelation)
		end
	end
	
	if message_id == hash("pulse_particule_final") then
		local particuleFront = msg.url(nil, message.tileMatch.instanceSquareId, "front")
		go.set(particuleFront, "scale", vmath.vector3(0.7, 0.7, 1))
		go.animate(particuleFront, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_OUTELASTIC, 0.6, (((message.tileMatch.positionX+1)+(message.tileMatch.positionY+1))/10), closureParticule)
	end

	-- if message_id == hash("processing_slide") then
	-- 	currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x + message.currentGapX
	-- 	currentLevel.blocks[self.block][self.tileNumber].positionReturn.x = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x
	-- 	local testPosition = go.get_position(currentLevel.refBlock[self.block].factoryBlockId)
	-- 	go.set_position(currentLevel.blocks[self.block][self.tileNumber].positionTileBlock)
	-- end

	if message_id == hash("animate_slide") then
		if message.direction == "TO_LEFT" then
			currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x - message.average
			currentLevel.blocks[self.block][self.tileNumber].positionReturn.x = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x
			--currentLevel.refBlock[self.block].positionBlock.x = currentLevel.refBlock[self.block].positionBlock.x - message.average
		end
		if message.direction == "TO_RIGHT" then
			currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x + message.average
			currentLevel.blocks[self.block][self.tileNumber].positionReturn.x = currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x
			--currentLevel.refBlock[self.block].positionBlock.x = currentLevel.refBlock[self.block].positionBlock.x + message.average
		end
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, currentLevel.blocks[self.block][self.tileNumber].positionTileBlock.x, go.EASING_OUTEXPO, message.duration, 0, reinitializeFlagSlide)
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
end

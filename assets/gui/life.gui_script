local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
local currentLevel = require("levels.template")
local list = require("levels.lists")
local languages = require("ressources.langages")
local modifier = require("ressources.modifier")

function setParamsViFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("VI_80_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("VI_20"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("VI_20"))
	gui.set_font(gui.get_node("progress_txt"), hash("VI_20"))
	gui.set_font(gui.get_node("no_ads"), hash("VI_20"))
	gui.set_font(gui.get_node("jump_level"), hash("VI_20"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("VI_20"))
	gui.set_font(gui.get_node("musique"), hash("VI_20"))
	gui.set_font(gui.get_node("langue"), hash("VI_20"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("VI_20"))
	gui.set_font(gui.get_node("watch_video"), hash("VI_20"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("VI_30_border"))

	--HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("VI_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("VI_30_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("VI_20"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("VI_20"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("VI_20"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("VI_30_border"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("VI_20"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("VI_20"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("VI_20"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("VI_30_border"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("VI_20"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("VI_20"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("VI_30_border"))
end

function setParamsKrFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("KR_80_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("KR_25"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("KR_25"))
	gui.set_font(gui.get_node("progress_txt"), hash("KR_25"))
	gui.set_font(gui.get_node("no_ads"), hash("KR_25"))
	gui.set_font(gui.get_node("jump_level"), hash("KR_25"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("KR_25"))
	gui.set_font(gui.get_node("musique"), hash("KR_25"))
	gui.set_font(gui.get_node("langue"), hash("KR_25"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("KR_25"))
	gui.set_font(gui.get_node("watch_video"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("KR_30_border"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("KR_30_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("KR_25"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("KR_25"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("KR_30_border"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("KR_25"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("KR_25"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("KR_30_border"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("KR_30_border"))
end

function setParamsJaFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("JA_80_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("JA_20"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("JA_20"))
	gui.set_font(gui.get_node("progress_txt"), hash("JA_20"))
	gui.set_font(gui.get_node("no_ads"), hash("JA_20"))
	gui.set_font(gui.get_node("jump_level"), hash("JA_20"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("JA_20"))
	gui.set_font(gui.get_node("musique"), hash("JA_20"))
	gui.set_font(gui.get_node("langue"), hash("JA_20"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("JA_20"))
	gui.set_font(gui.get_node("watch_video"), hash("JA_20"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("JA_25"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("JA_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("JA_30_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("JA_20"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("JA_20"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("JA_20"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("JA_25"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("JA_20"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("JA_20"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("JA_20"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("JA_25"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("JA_20"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("JA_20"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("JA_25"))
end
function setParamsZhFont(selft)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("ZH_80_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("ZH_20"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("ZH_20"))
	gui.set_font(gui.get_node("progress_txt"), hash("ZH_20"))
	gui.set_font(gui.get_node("no_ads"), hash("ZH_20"))
	gui.set_font(gui.get_node("jump_level"), hash("ZH_20"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("ZH_20"))
	gui.set_font(gui.get_node("musique"), hash("ZH_20"))
	gui.set_font(gui.get_node("langue"), hash("ZH_20"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("ZH_20"))
	gui.set_font(gui.get_node("watch_video"), hash("ZH_20"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("ZH_25"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("ZH_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("ZH_30_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("ZH_20"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("ZH_20"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("ZH_20"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("ZH_25"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("ZH_20"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("ZH_20"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("ZH_20"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("ZH_25"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("ZH_20"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("ZH_20"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("ZH_25"))
end

function setParamsArbFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("ARB_80_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("ARB_25"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("ARB_25"))
	gui.set_font(gui.get_node("progress_txt"), hash("ARB_25"))
	gui.set_font(gui.get_node("no_ads"), hash("ARB_25"))
	gui.set_font(gui.get_node("jump_level"), hash("ARB_25"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("ARB_25"))
	gui.set_font(gui.get_node("musique"), hash("ARB_25"))
	gui.set_font(gui.get_node("langue"), hash("ARB_25"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("ARB_25"))
	gui.set_font(gui.get_node("watch_video"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("ARB_35_border"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("ARB_35_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("ARB_25"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("ARB_25"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("ARB_35_border"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("ARB_25"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("ARB_25"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("ARB_35_border"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("ARB_35_border"))
end

function setParamsRuFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("RU_85_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("RU_20"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("RU_20"))
	gui.set_font(gui.get_node("progress_txt"), hash("RU_20"))
	gui.set_font(gui.get_node("no_ads"), hash("RU_20"))
	gui.set_font(gui.get_node("jump_level"), hash("RU_20"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("RU_20"))
	gui.set_font(gui.get_node("musique"), hash("RU_20"))
	gui.set_font(gui.get_node("langue"), hash("RU_20"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("RU_22"))
	gui.set_font(gui.get_node("watch_video"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("RU_30_border"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("RU_30_border"))
	
	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("RU_22"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("RU_22"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("RU_30_border"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("RU_22"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("RU_22"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("RU_30_border"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("RU_30_border"))
end

function setParamsLatineFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("PoetsenOne60_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("PoetsenOne20"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("PoetsenOne20"))
	gui.set_font(gui.get_node("progress_txt"), hash("PoetsenOne20"))
	gui.set_font(gui.get_node("no_ads"), hash("PoetsenOne20"))
	gui.set_font(gui.get_node("jump_level"), hash("PoetsenOne20"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("PoetsenOne20"))
	gui.set_font(gui.get_node("musique"), hash("PoetsenOne20"))
	gui.set_font(gui.get_node("langue"), hash("PoetsenOne20"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("PoetsenOne25_border"))
	gui.set_font(gui.get_node("watch_video"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("PoetsenOne40_border"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("PoetsenOne40_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("PoetsenOne25_border"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("PoetsenOne40_border"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("PoetsenOne25_border"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("PoetsenOne40_border"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("PoetsenOne25_border"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("PoetsenOne40_border"))
end

function setParamsHindiFont(self)
	-- LOST_RESTART
	gui.set_font(gui.get_node("rate"), hash("HI_60_border"))

	-- NETWORK
	gui.set_font(gui.get_node("suivez_nous"), hash("HI_20"))
	gui.set_font(gui.get_node("evaluez_nous"), hash("HI_20"))
	gui.set_font(gui.get_node("progress_txt"), hash("HI_20"))
	gui.set_font(gui.get_node("no_ads"), hash("HI_20"))
	gui.set_font(gui.get_node("jump_level"), hash("HI_20"))

	-- PARAMETERS
	gui.set_font(gui.get_node("son"), hash("HI_20"))
	gui.set_font(gui.get_node("musique"), hash("HI_20"))
	gui.set_font(gui.get_node("langue"), hash("HI_20"))

	-- RECHARGE LIFE
	gui.set_font(gui.get_node("header_life"), hash("HI_25_border"))
	gui.set_font(gui.get_node("watch_video"), hash("HI_22"))
	gui.set_font(gui.get_node("txt_recharge_life"), hash("HI_40_border"))

	-- HOME
	gui.set_font(gui.get_node("txt_for_validation"), hash("HI_22"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("HI_40_border"))

	--RESET PROGRESSION
	gui.set_font(gui.get_node("header_progress"), hash("HI_25_border"))
	gui.set_font(gui.get_node("progress_txt_1"), hash("HI_22"))
	gui.set_font(gui.get_node("progress_txt_2"), hash("HI_22"))
	gui.set_font(gui.get_node("txt_reset_confirmation"), hash("HI_40_border"))

	--REMOVE ADS
	gui.set_font(gui.get_node("header_remove_ads"), hash("HI_25_border"))
	gui.set_font(gui.get_node("remove_ads_txt_1"), hash("HI_22"))
	gui.set_font(gui.get_node("remove_ads_txt_2"), hash("HI_22"))
	gui.set_font(gui.get_node("txt_remove_ads_confirmation"), hash("HI_40_border"))

	--ERROR ADS
	gui.set_font(gui.get_node("header_error_ads"), hash("HI_25_border"))
	gui.set_font(gui.get_node("txt_error_ads"), hash("HI_22"))
	gui.set_font(gui.get_node("txt_error_ads_validation"), hash("HI_40_border"))
end

function setParamsTxtForAll(self)
	local lgConf = sys.load(ryoku_path)
	-- LOST_RESTART
	gui.set_text(gui.get_node("rate"), languages[lgConf.game_language].rate)

	-- NETWORK
	gui.set_text(gui.get_node("suivez_nous"), languages[lgConf.game_language].followus)
	gui.set_text(gui.get_node("evaluez_nous"), languages[lgConf.game_language].evaluateus)
	gui.set_text(gui.get_node("progress_txt"), languages[lgConf.game_language].progression)
	gui.set_text(gui.get_node("no_ads"), languages[lgConf.game_language].no_ads)
	gui.set_text(gui.get_node("jump_level"), languages[lgConf.game_language].jump_level)

	-- PARAMETERS
	gui.set_text(gui.get_node("son"), languages[lgConf.game_language].son)
	gui.set_text(gui.get_node("musique"), languages[lgConf.game_language].musique)
	gui.set_text(gui.get_node("langue"), languages[lgConf.game_language].lg)

	-- RECHARGE LIFE
	gui.set_text(gui.get_node("header_life"), languages[lgConf.game_language].header_life)
	gui.set_text(gui.get_node("watch_video"), languages[lgConf.game_language].watch_video)
	gui.set_text(gui.get_node("txt_recharge_life"), languages[lgConf.game_language].txt_recharge_life)

	-- HOME
	gui.set_text(gui.get_node("txt_for_validation"),languages[lgConf.game_language].txt_for_validation)
	gui.set_text(gui.get_node("txt_home_consent"), languages[lgConf.game_language].txt_home_consent)

	--RESET PROGRESSION
	gui.set_text(gui.get_node("header_progress"), languages[lgConf.game_language].reset_progression_title)
	gui.set_text(gui.get_node("progress_txt_1"), languages[lgConf.game_language].reset_progression_txt_1)
	gui.set_text(gui.get_node("progress_txt_2"), languages[lgConf.game_language].reset_progression_txt_2)
	gui.set_text(gui.get_node("txt_reset_confirmation"), languages[lgConf.game_language].reset_progression_button)

	--REMOVE ADS
	gui.set_text(gui.get_node("header_remove_ads"), languages[lgConf.game_language].remove_ads_title)
	gui.set_text(gui.get_node("remove_ads_txt_1"), languages[lgConf.game_language].remove_ads_txt_1)
	gui.set_text(gui.get_node("remove_ads_txt_2"), languages[lgConf.game_language].remove_ads_txt_2)
	gui.set_text(gui.get_node("txt_remove_ads_confirmation"), languages[lgConf.game_language].remove_ads_button)

	--ERROR ADS
	gui.set_text(gui.get_node("header_error_ads"), languages[lgConf.game_language].title_error_ads)
	gui.set_text(gui.get_node("txt_error_ads"), languages[lgConf.game_language].txt_error_ads)
	gui.set_text(gui.get_node("txt_error_ads_validation"), languages[lgConf.game_language].validation_error_ads)
end

function setParamsTxtArabic(self)
	local lgConfAr = sys.load(ryoku_path)
	-- LOST_RESTART
	gui.set_text(gui.get_node("rate"), modifier.modifierToArab(languages[lgConfAr.game_language].rate))

	-- NETWORK
	gui.set_text(gui.get_node("suivez_nous"), modifier.modifierToArab(languages[lgConfAr.game_language].followus))
	gui.set_text(gui.get_node("evaluez_nous"), modifier.modifierToArab(languages[lgConfAr.game_language].evaluateus))
	gui.set_text(gui.get_node("progress_txt"), modifier.modifierToArab(languages[lgConfAr.game_language].progression))
	gui.set_text(gui.get_node("no_ads"), modifier.modifierToArab(languages[lgConfAr.game_language].no_ads))
	gui.set_text(gui.get_node("jump_level"), modifier.modifierToArab(languages[lgConfAr.game_language].jump_level))

	-- PARAMETERS
	gui.set_text(gui.get_node("son"), modifier.modifierToArab(languages[lgConfAr.game_language].son))
	gui.set_text(gui.get_node("musique"), modifier.modifierToArab(languages[lgConfAr.game_language].musique))
	gui.set_text(gui.get_node("langue"), modifier.modifierToArab(languages[lgConfAr.game_language].lg))

	-- RECHARGE LIFE
	gui.set_text(gui.get_node("header_life"), modifier.modifierToArab(languages[lgConfAr.game_language].header_life))
	gui.set_text(gui.get_node("watch_video"), modifier.modifierToArab(languages[lgConfAr.game_language].watch_video))
	gui.set_text(gui.get_node("txt_recharge_life"), modifier.modifierToArab(languages[lgConfAr.game_language].txt_recharge_life))

	-- HOME
	gui.set_text(gui.get_node("txt_for_validation"), modifier.modifierToArab(languages[lgConfAr.game_language].txt_for_validation))
	gui.set_text(gui.get_node("txt_home_consent"), modifier.modifierToArab(languages[lgConfAr.game_language].txt_home_consent))

	--RESET PROGRESSION
	gui.set_text(gui.get_node("header_progress"), modifier.modifierToArab(languages[lgConfAr.game_language].reset_progression_title))
	gui.set_text(gui.get_node("progress_txt_1"), modifier.modifierToArab(languages[lgConfAr.game_language].reset_progression_txt_1))
	gui.set_text(gui.get_node("progress_txt_2"), modifier.modifierToArab(languages[lgConfAr.game_language].reset_progression_txt_2))
	gui.set_text(gui.get_node("txt_reset_confirmation"), modifier.modifierToArab(languages[lgConfAr.game_language].reset_progression_button))

	--REMOVE ADS
	gui.set_text(gui.get_node("header_remove_ads"), modifier.modifierToArab(languages[lgConfAr.game_language].remove_ads_title))
	gui.set_text(gui.get_node("remove_ads_txt_1"), modifier.modifierToArab(languages[lgConfAr.game_language].remove_ads_txt_1))
	gui.set_text(gui.get_node("remove_ads_txt_2"), modifier.modifierToArab(languages[lgConfAr.game_language].remove_ads_txt_2))
	gui.set_text(gui.get_node("txt_remove_ads_confirmation"), modifier.modifierToArab(languages[lgConfAr.game_language].remove_ads_button))

	--ERROR ADS
	gui.set_text(gui.get_node("header_error_ads"), modifier.modifierToArab(languages[lgConfAr.game_language].title_error_ads))
	gui.set_text(gui.get_node("txt_error_ads"), modifier.modifierToArab(languages[lgConfAr.game_language].txt_error_ads))
	gui.set_text(gui.get_node("txt_error_ads_validation"), modifier.modifierToArab(languages[lgConfAr.game_language].validation_error_ads))
end

function manageLanguageOnLifeScene(self)
	local manageConfig = sys.load(ryoku_path)
	if manageConfig.game_language == "ru" or manageConfig.game_language == "be" then
		setParamsRuFont(self)
	end
	if manageConfig.game_language == "ar" then
		setParamsArbFont(self)
	end
	if manageConfig.game_language == "ja" then
		setParamsJaFont(self)
	end
	if manageConfig.game_language == "ko" then
		setParamsKrFont(self)
	end
	if manageConfig.game_language == "vi" then
		setParamsViFont(self)
	end
	if manageConfig.game_language == "zh" then
		setParamsZhFont(self)
	end

	if manageConfig.game_language == "hi" then
		setParamsHindiFont(self)
	end

	if manageConfig.game_language == "fr" or 
	manageConfig.game_language == "en" or 
	manageConfig.game_language == "es" or 
	manageConfig.game_language == "de" or 
	manageConfig.game_language == "pt" or 
	manageConfig.game_language == "pl" or 
	manageConfig.game_language == "nl" or 
	manageConfig.game_language == "tr" or 
	manageConfig.game_language == "it" or 
	manageConfig.game_language == "da" or
	manageConfig.game_language == "fi" or 
	manageConfig.game_language == "hu" or 
	manageConfig.game_language == "is" or 
	manageConfig.game_language == "no" or 
	manageConfig.game_language == "sv" or
	manageConfig.game_language == "id" then
		setParamsLatineFont(self)
	end
	if manageConfig.game_language == "ar" then
		setParamsTxtArabic(self)
	else
		setParamsTxtForAll(self)
	end
end

function manageAddLife(self)
	self.toggleAddLife = true
	if self.ToggleDisplayOptions or self.displayParameter then
		self.ToggleDisplayOptions = false
	else
		currentLevel.platform.stopGame = true
	end
	togglePopupAddLife(self)
end

function manageGoHome(self)
	self.toggleGoHome = true
	if self.ToggleDisplayOptions or self.displayParameter then
		self.ToggleDisplayOptions = false
	end
	togglePopupGoHome(self)
end

function manageGoRemoveAds(self)
	self.toggleGoRemoveAds = true
	if self.ToggleDisplayOptions or self.displayParameter then
		self.ToggleDisplayOptions = false
	end
	togglePopupGoRemoveAds(self)
end

function manageErrorAds(self)
	self.toggleGoErrorAds = true
	if self.ToggleDisplayOptions or self.displayParameter then
		self.ToggleDisplayOptions = false
	else
		currentLevel.platform.stopGame = true
	end
	togglePopupGoErrorAds(self)
end

function manageGoResetProgression(self)
	self.toggleGoResetProgression = true
	if self.ToggleDisplayOptions or self.displayParameter then
		self.ToggleDisplayOptions = false
	end
	togglePopupGoResetProgression(self)
end

function closeResetProgression(self)
	self.toggleGoResetProgression = false
	if self.displyReload or self.displayParameter then
		self.ToggleDisplayOptions = true
	end
	togglePopupGoResetProgression(self)
end

function updateProgressionAndClose(self)
	local resetDataProgression = sys.load(ryoku_path)
	resetDataProgression.level = 1
	resetDataProgression.life = 3
	resetDataProgression.stopGame = false
	resetDataProgression.sound = true
	resetDataProgression.music = true
	resetDataProgression.handleLevelInfo = 1
	resetDataProgression.pendingTuto = true
	resetDataProgression.scrollHorizontale = true
	resetDataProgression.scrollVerticale = false
	if sys.save(ryoku_path, resetDataProgression) then
		closeResetProgression(self)
		timer.delay(0.2, false, function() 
			msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
		end)
	end
end

function toggleMusicOption(self)
	local textureMusic = ""
	local musicNode = gui.get_node("musique_icon")
	if self.musicOn then
		self.musicOn = false
		textureMusic = hash("front_music_off")
	else
		self.musicOn = true
		textureMusic = hash("front_music_on")
	end
	local saveMusic = sys.load(ryoku_path)
	saveMusic.music = self.musicOn
	if self.musicOn then
		sound.play("/sound#background_music", {delay = 0, gain = saveMusic.gainMusic})
	end
	if not self.musicOn then
		sound.stop("/sound#background_music")
	end
	if sys.save(ryoku_path, saveMusic) then
		gui.set_texture(musicNode, hash("parameter"))
		gui.play_flipbook(musicNode, textureMusic)
	end
end

function toggleSoundOption(self)
	local textureSound = ""
	local soundNode = gui.get_node("son_icon")
	if self.soundOn then
		self.soundOn = false
		textureSound = hash("front_sound_off")
	else
		self.soundOn = true
		textureSound = hash("front_sound_on")
	end
	local saveSound = sys.load(ryoku_path)
	saveSound.sound = self.soundOn
	if sys.save(ryoku_path, saveSound) then
		gui.set_texture(soundNode, hash("parameter"))
		gui.play_flipbook(soundNode, textureSound)
	end
end

function togglePopupAddLife(self)
	gui.set_enabled(gui.get_node("overlay_full"), self.toggleAddLife)
	gui.set_enabled(gui.get_node("popup_add_life"), self.toggleAddLife)
	toggleDisplayOption(self)
end

function togglePopupGoHome(self)
	gui.set_enabled(gui.get_node("overlay_full"), self.toggleGoHome)
	gui.set_enabled(gui.get_node("popup_go_home"), self.toggleGoHome)
	toggleDisplayOption(self)
end

function togglePopupGoRemoveAds(self)
	gui.set_enabled(gui.get_node("overlay_full"), self.toggleGoRemoveAds)
	gui.set_enabled(gui.get_node("popup_remove_ads"), self.toggleGoRemoveAds)
	toggleDisplayOption(self)
end

function togglePopupGoErrorAds(self)
	gui.set_enabled(gui.get_node("overlay_full"), self.toggleGoErrorAds)
	gui.set_enabled(gui.get_node("popup_error_ads"), self.toggleGoErrorAds)
	toggleDisplayOption(self)
end

function togglePopupGoResetProgression(self)
	gui.set_enabled(gui.get_node("overlay_full"), self.toggleGoResetProgression)
	gui.set_enabled(gui.get_node("popup_reset_progress"), self.toggleGoResetProgression)
	toggleDisplayOption(self)
end

function toggleDisplayOption(self)
	gui.set_enabled(gui.get_node("overlay"), self.ToggleDisplayOptions)
	gui.set_enabled(gui.get_node("display_lost"), self.ToggleDisplayOptions)
	gui.set_enabled(gui.get_node("lost_restart"), self.displyReload)
	gui.set_enabled(gui.get_node("lost_restart"), self.displyReload)
	gui.set_enabled(gui.get_node("parameters"), self.displayParameter)
	gui.set_enabled(gui.get_node("parameters"), self.displayParameter)
end

function setIndexInLanguage(self)
	local configCursor = sys.load(ryoku_path)
	local cursorLg = 0
	for i = 1, #self.lgList do
		cursorLg = cursorLg + 1
		if self.lgList[i] == configCursor.game_language then
			return cursorLg
		end
		-- do things
	end
end

function paramatersSound(self)
	local soundIsActive = sys.load(ryoku_path)
	if soundIsActive.sound then
		sound.play("/sound#validation_button", {delay = 0, gain = soundIsActive.gainSelection})
	end
end

function receiveLifeSound(self)
	local soundLifeIsActive = sys.load(ryoku_path)
	if soundLifeIsActive.sound then
		sound.play("/sound#receive_bonus", {delay = 0, gain = soundLifeIsActive.gainAction})
	end
end

function init(self)
	local configInit = sys.load(ryoku_path)
	--self.lgList = {"fr","en","zh","es","de","ru","pt","pl","nl","tr","it","ja","ko","vi","id","ar"}
	self.lgList = {"fr","en","zh","hi","es","de","ru","pt","pl","nl","tr","it","ja","ko","vi","id","ar","da","fi","hu","is","no","sv"}
	msg.post(".", "acquire_input_focus")
	gui.set_text(gui.get_node("score_life"), configInit.life)
	gui.animate(gui.get_node("heart"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 1, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
	if configInit.pass_level == 0 then
		gui.set_enabled(gui.get_node("pass_level"), false)
	end
	if configInit.pass_level > 0 then
		gui.set_enabled(gui.get_node("pass_level"), true)
		gui.set_text(gui.get_node("number_pass"), configInit.pass_level)
	end
	if configInit.is_interstitial_transition then
		gui.set_enabled(gui.get_node("no_pubs"), false)
	end
	self.handleForwardLevel = true
	self.toggleAddLife = false
	self.toggleGoHome = false
	self.ToggleDisplayOptions = false
	self.displyReload = false
	self.displayParameter = false
	self.musicOn = true
	self.soundOn = true
	manageLanguageOnLifeScene(self)
	self.lgIndex = setIndexInLanguage(self)
	self.toggleGoRemoveAds = false
	self.toggleGoResetProgression = false
	self.toggleGoErrorAds = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("increment_and_toggle_life_by_ads") then
		msg.post("/life#life", "increment_life", { value = 3 })
		receiveLifeSound(self)
		self.toggleAddLife = false
		if self.displyReload or self.displayParameter then
			self.ToggleDisplayOptions = true
		else
			currentLevel.platform.stopGame = false
		end
		togglePopupAddLife(self)
	end
	if message_id == hash("remove_ads_by_iap_buy") then
		receiveLifeSound(self)
		local iapAdsRemove = sys.load(ryoku_path)
		iapAdsRemove.is_interstitial_transition = true
		if sys.save(ryoku_path, iapAdsRemove) then
			gui.set_enabled(gui.get_node("no_pubs"), false)
			self.toggleGoRemoveAds = false
			if self.displyReload or self.displayParameter then
				self.ToggleDisplayOptions = true
			end
			togglePopupGoRemoveAds(self)
		end
	end
	if message_id == hash("increment_life") then
		local saveLife = sys.load(ryoku_path)
		saveLife.life = saveLife.life + message.value
		if sys.save(ryoku_path, saveLife) then
			local getLife = sys.load(ryoku_path)
			gui.set_text(gui.get_node("score_life"), getLife.life)
			gui.animate(gui.get_node("heart"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 1, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		end
	end
	if message_id == hash("display_option_lost") then
		self.ToggleDisplayOptions = true
		self.displyReload = true
		self.displayParameter = false
		currentLevel.platform.stopGame = true
		toggleDisplayOption(self)
		gui.animate(gui.get_node("reload"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_INOUTQUAD, 0.5, 0.5, nil, gui.PLAYBACK_ONCE_PINGPONG)
	end
	if message_id == hash("display_option_parameter") then
		self.ToggleDisplayOptions = true
		self.displyReload = false
		self.displayParameter = true
		currentLevel.platform.stopGame = true
		toggleDisplayOption(self)
	end
	if message_id == hash("manage_getting_life") then
		manageAddLife(self)
	end
	if message_id == hash("manage_forward_level") then
		local updatedPassLevel = sys.load(ryoku_path)
		updatedPassLevel.pass_level = updatedPassLevel.pass_level + 1
		if updatedPassLevel.pass_level > 0 then
			gui.set_enabled(gui.get_node("pass_level"), true)
			gui.set_text(gui.get_node("number_pass"), updatedPassLevel.pass_level)
		end
		if sys.save(ryoku_path, updatedPassLevel) then
			self.handleForwardLevel = true
		end
	end
end

function on_input(self, action_id, action)
	if  action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("reload"), action.x, action.y) and gui.is_enabled(gui.get_node("display_lost")) and gui.is_enabled(gui.get_node("lost_restart")) then
			paramatersSound(self)
			local checkLife = sys.load(ryoku_path)
			if checkLife.life == 0 then
				manageAddLife(self)
			else
				self.ToggleDisplayOptions = false
				self.displyReload = false
				self.displayParameter = false
				toggleDisplayOption(self)
				msg.post("controller:/loader#controller", "changeScene", { newScene = "restartLevel" })
			end
		end
		if gui.pick_node(gui.get_node("forward_level"), action.x, action.y) and gui.is_enabled(gui.get_node("display_lost")) and self.handleForwardLevel then
			paramatersSound(self)
			gui.set_scale(gui.get_node("forward_level"), vmath.vector3(1))
			gui.animate(gui.get_node("forward_level"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				self.handleForwardLevel = false
				local enablePassLevel = sys.load(ryoku_path)
				if enablePassLevel.pass_level > 0 then
					local savePassLevel = sys.load(ryoku_path)
					savePassLevel.pass_level = savePassLevel.pass_level - 1
					savePassLevel.level = savePassLevel.level + 1
					if sys.save(ryoku_path, savePassLevel) then
						local checkLevel = sys.load(ryoku_path)
						if list.targetLevelByBlock(checkLevel.level) == nil then
							msg.post("controller:/loader#controller", "changeScene", { newScene = "seeYou" })
						else
							self.handleForwardLevel = true
							msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
						end
					end
				else
					timer.delay(1, false, function() 
						self.handleForwardLevel = true
					end)
					msg.post("/iap#iap", "iap_buy_pass_level")
				end
			end, gui.PLAYBACK_ONCE_PINGPONG)
			
		end
		if (gui.pick_node(gui.get_node("bg_heart"), action.x, action.y) and not gui.is_enabled(gui.get_node("popup_add_life")) and not currentLevel.platform.stopGame) or 
		(gui.pick_node(gui.get_node("bg_heart"), action.x, action.y) and gui.is_enabled(gui.get_node("display_lost"))) then
			paramatersSound(self)
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("heart"), vmath.vector3(1))
				gui.animate(gui.get_node("heart"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 1, 0, function(self, node)
					manageAddLife(self)
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
			if sys.get_connectivity() == sys.NETWORK_DISCONNECTED then
				manageErrorAds(self)
			end
		end
		if gui.pick_node(gui.get_node("life_recharge_free"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_add_life")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("life_recharge_free"), vmath.vector3(1))
				gui.animate(gui.get_node("life_recharge_free"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
					msg.post("/ads#ads", "display_rewardedvideo_ad_unit_life")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
		end
		if gui.pick_node(gui.get_node("close_parameter"), action.x, action.y) and gui.is_enabled(gui.get_node("parameters")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			self.ToggleDisplayOptions = false
			self.displyReload = false
			self.displayParameter = false
			toggleDisplayOption(self)
			msg.post("/parameter#parameters", "enable_parameter")
		end
		if gui.pick_node(gui.get_node("sound"), action.x, action.y) and gui.is_enabled(gui.get_node("parameters")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			toggleSoundOption(self)
		end
		if gui.pick_node(gui.get_node("music"), action.x, action.y) and gui.is_enabled(gui.get_node("parameters")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			toggleMusicOption(self)
		end
		if gui.pick_node(gui.get_node("translate"), action.x, action.y) and gui.is_enabled(gui.get_node("parameters")) and gui.is_enabled(gui.get_node("display_lost")) and not gui.is_enabled(gui.get_node("popup_add_life")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			local saveLg = sys.load(ryoku_path)
			if tonumber(self.lgIndex) == tonumber(table.maxn(self.lgList)) then
				saveLg.game_language = "fr"
				self.lgIndex = 1
			else
				saveLg.game_language = self.lgList[self.lgIndex+1]
				self.lgIndex = self.lgIndex + 1
			end
			if sys.save(ryoku_path, saveLg) then
				manageLanguageOnLifeScene(self)
			end
		end
		if gui.pick_node(gui.get_node("home"), action.x, action.y) and gui.is_enabled(gui.get_node("network")) and not gui.is_enabled(gui.get_node("popup_go_home")) and not gui.is_enabled(gui.get_node("popup_add_life")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			gui.set_scale(gui.get_node("home"), vmath.vector3(1))
			gui.animate(gui.get_node("home"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				manageGoHome(self)
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("close_home_validation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_go_home")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			self.toggleGoHome = false
			if self.displyReload or self.displayParameter then
				self.ToggleDisplayOptions = true
			end
			togglePopupGoHome(self)
		end
		if gui.pick_node(gui.get_node("home_validation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_go_home")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			gui.set_scale(gui.get_node("home_validation"), vmath.vector3(1))
			gui.animate(gui.get_node("home_validation"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				self.toggleGoHome = false
				if self.displyReload or self.displayParameter then
					self.ToggleDisplayOptions = false
					self.displayParameter = false
				end
				local interstitial_retry_level = sys.load(ryoku_path)
				interstitial_retry_level.current_transition = interstitial_retry_level.current_transition + 4
				if sys.save(ryoku_path, interstitial_retry_level) then
					local interstitial_retry_level_updated = sys.load(ryoku_path)
					if not interstitial_retry_level_updated.is_interstitial_transition and 
					interstitial_retry_level_updated.current_transition >= interstitial_retry_level_updated.step_transition and 
					interstitial_retry_level_updated.level > 6 and 
					interstitial_retry_level_updated.life ~= 0 then
						msg.post("/ads#ads", "display_intersitial_ad_unit_pass_level")
					else
						togglePopupGoHome(self)
						msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
					end
				end
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("star"), action.x, action.y) and gui.is_enabled(gui.get_node("network")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			gui.set_scale(gui.get_node("star"), vmath.vector3(1))
			gui.animate(gui.get_node("star"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node) 
				sys.open_url("market://details?id=com.unitedsquaresgames.ryoku")
				--sys.open_url("https://play.google.com/store/apps/details?id=com.unitedsquaresgames.ryoku")
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("instagram"), action.x, action.y) and gui.is_enabled(gui.get_node("network")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			gui.set_scale(gui.get_node("instagram"), vmath.vector3(1))
			gui.animate(gui.get_node("instagram"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node) 
				sys.open_url("https://www.instagram.com/unitedsquaresgames/")
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("no_pubs"), action.x, action.y) and gui.is_enabled(gui.get_node("no_pubs")) and gui.is_enabled(gui.get_node("network")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("no_pubs"), vmath.vector3(1))
				gui.animate(gui.get_node("no_pubs"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node) 
					--msg.post("/iap#iap", "iap_buy_ads_remove")
					manageGoRemoveAds(self)
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
			if sys.get_connectivity() == sys.NETWORK_DISCONNECTED then
				manageErrorAds(self)
			end
		end
		if gui.pick_node(gui.get_node("remove_ads_confirmation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_remove_ads")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("remove_ads_confirmation"), vmath.vector3(1))
				gui.animate(gui.get_node("remove_ads_confirmation"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node) 
					msg.post("/iap#iap", "iap_buy_ads_remove")
					--msg.post("/life#life", "remove_ads_by_iap_buy")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
		end
		if gui.pick_node(gui.get_node("remove_ads_close"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_remove_ads")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			self.toggleGoRemoveAds = false
			if self.displyReload or self.displayParameter then
				self.ToggleDisplayOptions = true
			end
			togglePopupGoRemoveAds(self)
		end
		if gui.pick_node(gui.get_node("life_close"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_add_life")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			self.toggleAddLife = false
			if self.displyReload or self.displayParameter then
				self.ToggleDisplayOptions = true
			else
				currentLevel.platform.stopGame = false
			end
			togglePopupAddLife(self)
		end
		if gui.pick_node(gui.get_node("reset_progression"), action.x, action.y) and gui.is_enabled(gui.get_node("network")) and gui.is_enabled(gui.get_node("display_lost")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			gui.set_scale(gui.get_node("reset_progression"), vmath.vector3(1))
			gui.animate(gui.get_node("reset_progression"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node) 
				manageGoResetProgression(self)
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("progress_close"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_reset_progress")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			self.toggleGoResetProgression = false
			if self.displyReload or self.displayParameter then
				self.ToggleDisplayOptions = true
			end
			togglePopupGoResetProgression(self)
		end
		if gui.pick_node(gui.get_node("reset_confirmation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_reset_progress")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			gui.set_scale(gui.get_node("reset_confirmation"), vmath.vector3(1))
			gui.animate(gui.get_node("reset_confirmation"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node) 
				updateProgressionAndClose(self)
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("error_ads_validation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_error_ads")) and currentLevel.platform.stopGame then
			paramatersSound(self)
			self.toggleGoErrorAds = false
			if self.displyReload or self.displayParameter then
				self.ToggleDisplayOptions = true
			else
				currentLevel.platform.stopGame = false
			end
			togglePopupGoErrorAds(self)
		end
	end
end
local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
--local list = require("ressources.listLevel")
--local currentLevel = list[config.level].path
local currentLevel = require("levels.template")

function getAllSudokuBlocks(self)
	local countSudokuNumber = 0
	for s = 1, #currentLevel.blocks do
		for u = 1, #currentLevel.blocks[s] do
			if not currentLevel.blocks[s][u].isLocked and currentLevel.blocks[s][u].numberRevealed then
				countSudokuNumber = countSudokuNumber + 1
			end
			if #currentLevel.blocks == s and #currentLevel.blocks[s] == u then
				return countSudokuNumber
			end
		end
	end
end

function useBonusAndSound(self)
	local useBonusIsActive = sys.load(ryoku_path)
	if useBonusIsActive.sound then
		sound.play("/sound#validation_button", {delay = 0, gain = useBonusIsActive.gainSelection})
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	if config.enable_adjacent then
		gui.set_texture(gui.get_node("adjacent"), hash("powersup"))
		gui.play_flipbook(gui.get_node("adjacent"), hash("adjacentes"))
		if config.adjacent == 0 then
			gui.set_enabled(gui.get_node("ads_zone"), true)
			gui.set_enabled(gui.get_node("txt_zone"), false)
		end
		if config.adjacent > 0 then
			gui.set_enabled(gui.get_node("ads_zone"), false)
			gui.set_enabled(gui.get_node("txt_zone"), true)
			gui.set_text(gui.get_node("txt_zone"), config.adjacent)
		end
	end
	if not config.enable_adjacent then
		gui.set_texture(gui.get_node("adjacent"), hash("powersup"))
		gui.play_flipbook(gui.get_node("adjacent"), hash("adjacentes_dark"))
		gui.set_enabled(gui.get_node("ads_zone"), true)
		gui.set_enabled(gui.get_node("txt_zone"), false)
	end

	if config.enable_target then
		gui.set_texture(gui.get_node("target"), hash("powersup"))
		gui.play_flipbook(gui.get_node("target"), hash("target"))
		if config.target == 0 then
			gui.set_enabled(gui.get_node("ads_target"), true)
			gui.set_enabled(gui.get_node("txt_target"), false)
		end
		if config.target > 0 then
			gui.set_enabled(gui.get_node("ads_target"), false)
			gui.set_enabled(gui.get_node("txt_target"), true)
			gui.set_text(gui.get_node("txt_target"), config.target)
		end
	end
	if not config.enable_target then
		gui.set_texture(gui.get_node("target"), hash("powersup"))
		gui.play_flipbook(gui.get_node("target"), hash("target_dark"))
		gui.set_enabled(gui.get_node("ads_target"), true)
		gui.set_enabled(gui.get_node("txt_target"), false)
	end

	if config.enable_group then
		gui.set_texture(gui.get_node("group"), hash("powersup"))
		gui.play_flipbook(gui.get_node("group"), hash("group"))
		if config.group == 0 then
			gui.set_enabled(gui.get_node("ads_group"), true)
			gui.set_enabled(gui.get_node("txt_group"), false)
		end
		if config.group > 0 then
			gui.set_enabled(gui.get_node("ads_group"), false)
			gui.set_enabled(gui.get_node("txt_group"), true)
			gui.set_text(gui.get_node("txt_group"), config.group)
		end
	end
	if not config.enable_group then
		gui.set_texture(gui.get_node("group"), hash("powersup"))
		gui.play_flipbook(gui.get_node("group"), hash("group_dark"))
		gui.set_enabled(gui.get_node("ads_group"), true)
		gui.set_enabled(gui.get_node("txt_group"), false)
	end

	if config.enable_sudoku then
		gui.set_texture(gui.get_node("sudoku"), hash("powersup"))
		gui.play_flipbook(gui.get_node("sudoku"), hash("sudoku"))
		if config.sudoku == 0 then
			gui.set_enabled(gui.get_node("ads_sudoku"), true)
			gui.set_enabled(gui.get_node("txt_sudoku"), false)
		end
		if config.sudoku > 0 then
			gui.set_enabled(gui.get_node("ads_sudoku"), false)
			gui.set_enabled(gui.get_node("txt_sudoku"), true)
			gui.set_text(gui.get_node("txt_sudoku"), config.sudoku)
		end
	end
	if not config.enable_sudoku then
		gui.set_texture(gui.get_node("sudoku"), hash("powersup"))
		gui.play_flipbook(gui.get_node("sudoku"), hash("sudoku_dark"))
		gui.set_enabled(gui.get_node("ads_sudoku"), true)
		gui.set_enabled(gui.get_node("txt_sudoku"), false)
	end
	
	if currentLevel.platform.stopGame and config.level == 3 and not config.enable_adjacent then
		local saveEnableAdjacent = sys.load(ryoku_path)
		saveEnableAdjacent.enable_adjacent = true
		if sys.save(ryoku_path, saveEnableAdjacent) then
			timer.delay(1, false, function() 
				gui.animate(gui.get_node("adjacent"), gui.PROP_SCALE, vmath.vector3(1.35), gui.EASING_INOUTQUAD, 0.5, 0.5, function(self, node) 
					gui.set_texture(gui.get_node("adjacent"), hash("powersup"))
					gui.play_flipbook(gui.get_node("adjacent"), hash("adjacentes"))
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end)
		end
	end

	if currentLevel.platform.stopGame and config.level == 4 and not config.enable_target then
		local saveEnableTarget = sys.load(ryoku_path)
		saveEnableTarget.enable_target = true
		if sys.save(ryoku_path, saveEnableTarget) then
			timer.delay(1, false, function() 
				gui.animate(gui.get_node("target"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_INOUTQUAD, 0.5, 0.5, function(self, node) 
					gui.set_texture(gui.get_node("target"), hash("powersup"))
					gui.play_flipbook(gui.get_node("target"), hash("target"))
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end)
		end
	end

	if currentLevel.platform.stopGame and config.level == 5 and not config.enable_group then
		local saveEnableGroup = sys.load(ryoku_path)
		saveEnableGroup.enable_group = true
		if sys.save(ryoku_path, saveEnableGroup) then
			timer.delay(1, false, function() 
				gui.animate(gui.get_node("group"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_INOUTQUAD, 0.5, 0.5, function(self, node) 
					gui.set_texture(gui.get_node("group"), hash("powersup"))
					gui.play_flipbook(gui.get_node("group"), hash("group"))
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end)
		end
	end

	if currentLevel.platform.stopGame and config.level == 6 and not config.enable_sudoku then
		local saveEnableSudoku = sys.load(ryoku_path)
		saveEnableSudoku.enable_sudoku = true
		if sys.save(ryoku_path, saveEnableSudoku) then
			
			timer.delay(1, false, function() 
				gui.animate(gui.get_node("sudoku"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_INOUTQUAD, 0.5, 0.5, function(self, node) 
					gui.set_texture(gui.get_node("sudoku"), hash("powersup"))
					gui.play_flipbook(gui.get_node("sudoku"), hash("sudoku"))
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end)
		end
	end
	self.isTickRoundedInfos3000 = false
	self.gapHandleInfo = 2
end

function countTargetActive(self)
	currentLevel.platform.counterTarget = 0
	for tz = 1, #currentLevel.grid do
		for gt = 1, #currentLevel.grid[tz] do
			if not currentLevel.grid[tz][gt].isGrey and not currentLevel.grid[tz][gt].isGood then
				currentLevel.platform.counterTarget = currentLevel.platform.counterTarget + 1
			end
		end
	end
end

function manageSudokuCounter(self)
	local getSudokuBlock = gui.get_text(gui.get_node("sudoku_counter"))
	local sudokuCounter = getAllSudokuBlocks(self)
	if tonumber(getSudokuBlock) ~= sudokuCounter then
		gui.animate(gui.get_node("block_sudoku"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.4, 0, function(self, node) 
			gui.set_text(gui.get_node("sudoku_counter"), sudokuCounter)
		end, gui.PLAYBACK_ONCE_PINGPONG)
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.isTickRoundedInfos3000 then
		currentLevel.platform.tickInfos = currentLevel.platform.tickInfos + dt
		currentLevel.platform.tickRoundedInfos = math.floor(currentLevel.platform.tickInfos * 100)
	end
	if currentLevel.platform.tickRoundedInfos >= 60 and self.isTickRoundedInfos3000 then
		countTargetActive(self)
		if currentLevel.platform.counterTarget == 0 and currentLevel.platform.totalBlockAvailable > 3 then
			local saveHandleInfo = sys.load(ryoku_path)
			saveHandleInfo.handleLevelInfo = saveHandleInfo.level
			sys.save(ryoku_path, saveHandleInfo)
			currentLevel.platform.stopGame = true
			gui.animate(gui.get_node("adjacent"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.5, 0, function(self, node) 
				gui.animate(gui.get_node("adjacent"), "rotation.z", 10, gui.EASING_INOUTBACK, 0.3, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			end, gui.PLAYBACK_ONCE_PINGPONG)
			gui.animate(gui.get_node("target"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.5, 0.3, function(self, node) 
				gui.animate(gui.get_node("target"), "rotation.z", 10, gui.EASING_INOUTBACK, 0.3, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			end, gui.PLAYBACK_ONCE_PINGPONG)
			gui.animate(gui.get_node("group"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.5, 0.6, function(self, node) 
				gui.animate(gui.get_node("group"), "rotation.z", 10, gui.EASING_INOUTBACK, 0.3, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			end, gui.PLAYBACK_ONCE_PINGPONG)
			gui.animate(gui.get_node("sudoku"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.5, 0.9, function(self, node) 
				gui.animate(gui.get_node("sudoku"), "rotation.z", 10, gui.EASING_INOUTBACK, 0.3, 0, function(self, node) 
					msg.post("/popup#popup", "display_info")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		self.isTickRoundedInfos3000 = false
		--currentLevel.platform.handleManageInfos = false
		currentLevel.platform.tickInfos = 0
		currentLevel.platform.tickRoundedInfos = 0
	end
	-- if currentLevel.platform.handleManageTarget or currentLevel.platform.initialManageTarget then
	-- 	manageSudokuCounter(self)
	-- end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("increment_zone") then
		local zoneNumber = sys.load(ryoku_path)
		if zoneNumber.adjacent == 0 then
			gui.set_enabled(gui.get_node("ads_zone"), true)
			gui.set_enabled(gui.get_node("txt_zone"), false)
		end
		if zoneNumber.adjacent > 0 then
			gui.set_enabled(gui.get_node("ads_zone"), false)
			gui.set_enabled(gui.get_node("txt_zone"), true)
			gui.set_text(gui.get_node("txt_zone"), zoneNumber.adjacent)
			gui.animate(gui.get_node("adjacent"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		end
	end

	if message_id == hash("increment_target") then
		local targetNumber = sys.load(ryoku_path)
		if targetNumber.target == 0 then
			gui.set_enabled(gui.get_node("ads_target"), true)
			gui.set_enabled(gui.get_node("txt_target"), false)
		end
		if targetNumber.target > 0 then
			gui.set_enabled(gui.get_node("ads_target"), false)
			gui.set_enabled(gui.get_node("txt_target"), true)
			gui.set_text(gui.get_node("txt_target"), targetNumber.target)
			gui.animate(gui.get_node("target"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		end
	end

	if message_id == hash("increment_group") then
		local groupNumber = sys.load(ryoku_path)
		if groupNumber.group == 0 then
			gui.set_enabled(gui.get_node("ads_group"), true)
			gui.set_enabled(gui.get_node("txt_group"), false)
		end
		if groupNumber.group > 0 then
			gui.set_enabled(gui.get_node("ads_group"), false)
			gui.set_enabled(gui.get_node("txt_group"), true)
			gui.set_text(gui.get_node("txt_group"), groupNumber.group)
			gui.animate(gui.get_node("group"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		end
	end

	if message_id == hash("increment_sudoku") then
		local sudokuNumber = sys.load(ryoku_path)
		if sudokuNumber.sudoku == 0 then
			gui.set_enabled(gui.get_node("ads_sudoku"), true)
			gui.set_enabled(gui.get_node("txt_sudoku"), false)
		end
		if sudokuNumber.sudoku > 0 then
			gui.set_enabled(gui.get_node("ads_sudoku"), false)
			gui.set_enabled(gui.get_node("txt_sudoku"), true)
			gui.set_text(gui.get_node("txt_sudoku"), sudokuNumber.sudoku)
			gui.animate(gui.get_node("sudoku"), gui.PROP_SCALE, vmath.vector3(1.2), gui.EASING_OUTBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		end
	end

	if message_id == hash("manage_sudoku_counter") then
		manageSudokuCounter(self)
	end
	if message_id == hash("not_have_place") then
		gui.animate(gui.get_node("sudoku"), "rotation.z", 25, gui.EASING_OUTBOUNCE, 0.5, 0, function(self, node) 
			gui.animate(gui.get_node("sudoku"), "rotation.z", -25, gui.EASING_INOUTBACK, 0.3, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		end, gui.PLAYBACK_ONCE_PINGPONG)
		--gui.animate(gui.get_node("sudoku"), "rotation.z", vmath.vector({25,-25}), gui.EASING_INOUTBACK, 0.6, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
	end
	

	if message_id == hash("infos_bonus") then
		--currentLevel.platform.handleManageInfos = true
		local getTickInfo = sys.load(ryoku_path)
		if getTickInfo.level > 6 then
			if getTickInfo.level > 60 and getTickInfo.handleLevelInfo < getTickInfo.level then
				getTickInfo.handleLevelInfo = 99999
				if sys.save(ryoku_path, getTickInfo) then
					getTickInfo = sys.load(ryoku_path)
				end
			end
			if getTickInfo.level > getTickInfo.handleLevelInfo + self.gapHandleInfo then
				self.isTickRoundedInfos3000 = true
			end
		end
	end
end

function on_input(self, action_id, action)
	if action.pressed and currentLevel.platform.bonusName == "" then
		local clickIfEnable = sys.load(ryoku_path)
		if gui.pick_node(gui.get_node("adjacent"), action.x, action.y) and clickIfEnable.enable_adjacent and not currentLevel.platform.stopGame and clickIfEnable.adjacent > 0 then
			useBonusAndSound(self)
			gui.set_scale(gui.get_node("adjacent"), vmath.vector3(1))
			gui.animate(gui.get_node("adjacent"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
				msg.post("/level#main", "initialize_bonus", { bonusName = "adjacent_bonus" })
			end, gui.PLAYBACK_ONCE_PINGPONG)
			--msg.post("@system:", "exit", {code = 0})
		end
		if gui.pick_node(gui.get_node("adjacent"), action.x, action.y) and clickIfEnable.enable_adjacent and not currentLevel.platform.stopGame and clickIfEnable.adjacent == 0 then
			useBonusAndSound(self)
			currentLevel.platform.stopGame = true
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("adjacent"), vmath.vector3(1))
				gui.animate(gui.get_node("adjacent"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
					msg.post("/popup#popup", "zone_popup_pay")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
			if sys.get_connectivity() == sys.NETWORK_DISCONNECTED then
				msg.post("/popup#popup", "zone_popup_error_ads")
			end
		end
		if gui.pick_node(gui.get_node("target"), action.x, action.y) and clickIfEnable.enable_target and not currentLevel.platform.stopGame and clickIfEnable.target > 0 then
			useBonusAndSound(self)
			gui.set_scale(gui.get_node("target"), vmath.vector3(1))
			gui.animate(gui.get_node("target"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
				msg.post("/level#main", "initialize_bonus", { bonusName = "target_bonus" })
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("target"), action.x, action.y) and clickIfEnable.enable_target and not currentLevel.platform.stopGame and clickIfEnable.target == 0 then
			useBonusAndSound(self)
			currentLevel.platform.stopGame = true
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("target"), vmath.vector3(1))
				gui.animate(gui.get_node("target"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
					msg.post("/popup#popup", "target_popup_pay")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
			if sys.get_connectivity() == sys.NETWORK_DISCONNECTED then
				msg.post("/popup#popup", "zone_popup_error_ads")
			end
		end
		if gui.pick_node(gui.get_node("group"), action.x, action.y) and clickIfEnable.enable_group and not currentLevel.platform.stopGame and clickIfEnable.group > 0 then
			useBonusAndSound(self)
			gui.set_scale(gui.get_node("group"), vmath.vector3(1))
			gui.animate(gui.get_node("group"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
				msg.post("/level#main", "initialize_bonus", { bonusName = "group_bonus" })
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("group"), action.x, action.y) and clickIfEnable.enable_group and not currentLevel.platform.stopGame and clickIfEnable.group == 0 then
			useBonusAndSound(self)
			currentLevel.platform.stopGame = true
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("group"), vmath.vector3(1))
				gui.animate(gui.get_node("group"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
					msg.post("/popup#popup", "group_popup_pay")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
			if sys.get_connectivity() == sys.NETWORK_DISCONNECTED then
				msg.post("/popup#popup", "zone_popup_error_ads")
			end
		end
		if gui.pick_node(gui.get_node("sudoku"), action.x, action.y) and clickIfEnable.enable_sudoku and not currentLevel.platform.stopGame and clickIfEnable.sudoku > 0 then
			useBonusAndSound(self)
			gui.set_scale(gui.get_node("sudoku"), vmath.vector3(1))
			gui.animate(gui.get_node("sudoku"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
				msg.post("/level#main", "run_sudoku_bonus")
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("sudoku"), action.x, action.y) and clickIfEnable.enable_sudoku and not currentLevel.platform.stopGame and clickIfEnable.sudoku == 0 then
			useBonusAndSound(self)
			currentLevel.platform.stopGame = true
			if sys.get_connectivity() == sys.NETWORK_CONNECTED_CELLULAR or sys.get_connectivity() == sys.NETWORK_CONNECTED then
				gui.set_scale(gui.get_node("sudoku"), vmath.vector3(1))
				gui.animate(gui.get_node("sudoku"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.5, 0, function(self, node) 
					msg.post("/popup#popup", "sudoku_popup_pay")
				end, gui.PLAYBACK_ONCE_PINGPONG)
			end
			if sys.get_connectivity() == sys.NETWORK_DISCONNECTED then
				msg.post("/popup#popup", "zone_popup_error_ads")
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
local list = require("levels.lists")
local currentLevel = require("levels.template")
function init(self)
	msg.post(".", "acquire_input_focus")
	currentLevel.platform.positionArrowToLeft = gui.get_position(gui.get_node("left_available"))
	currentLevel.platform.positionArrowToRight = gui.get_position(gui.get_node("right_available"))
	gui.set_text(gui.get_node("left_block"), 0)
	gui.set_text(gui.get_node("right_block"), 0)
	--gui.set_enabled(gui.get_node("next_level"), false)
	self.finaliseNextLevel = false
	self.is_available_left = false
	self.is_not_available_left = false
	self.is_available_right = false
	self.is_not_available_right = false
end

function initialLeftAvailable(self, node)
	gui.set_position(node, currentLevel.platform.positionArrowToLeft)
end

function initialRightAvailable(self, node)
	gui.set_position(node, currentLevel.platform.positionArrowToRight)
end

function update(self, dt)
	if not self.finaliseNextLevel and currentLevel.platform.totalGroupDisplaying == currentLevel.platform.column and currentLevel.platform.finaliseNextLevel then
		--gui.set_enabled(gui.get_node("next_level"), true)
		self.finaliseNextLevel = true
		local setLevel = sys.load(ryoku_path)
		setLevel.level = setLevel.level + 1
		if sys.save(ryoku_path, setLevel) then
			local checkLevel = sys.load(ryoku_path)
			timer.delay(((currentLevel.platform.column * 2)/10) + 1, false, function()
				if list.targetLevelByBlock(checkLevel.level) == nil then
					msg.post("controller:/loader#controller", "changeScene", { newScene = "seeYou" })
				else
					local interstitial_pass_level = sys.load(ryoku_path)
					interstitial_pass_level.current_transition = interstitial_pass_level.current_transition + 1
					if sys.save(ryoku_path, interstitial_pass_level) then
						local interstitial_pass_level_updated = sys.load(ryoku_path)
						if not interstitial_pass_level_updated.is_interstitial_transition and 
						interstitial_pass_level_updated.current_transition >= interstitial_pass_level_updated.step_transition and 
						interstitial_pass_level_updated.level > 6 then
							msg.post("/ads#ads", "display_intersitial_ad_unit_pass_level")
						else
							msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
						end
					end
				end
			end)
		end
	end
	local leftAvailable = 0;
	local rightAvailable = 0;
	
	for a = 1, #currentLevel.refBlock do
		if currentLevel.refBlock[a].isActive then
			if currentLevel.selectionBlock[1].selectionFactoryBlockId == currentLevel.refBlock[a].factoryBlockId then
				currentLevel.platform.indexLeftAvailable = currentLevel.refBlock[a].index
			end
			if currentLevel.selectionBlock[3].selectionFactoryBlockId == currentLevel.refBlock[a].factoryBlockId then
				currentLevel.platform.indexRightAvailable = currentLevel.refBlock[a].index
			end
		end
	end

	for b = 1, #currentLevel.refBlock do
		if currentLevel.refBlock[b].isActive then
			if currentLevel.platform.indexLeftAvailable ~= 0 and 
			currentLevel.refBlock[b].index < currentLevel.platform.indexLeftAvailable then
				leftAvailable = leftAvailable + 1
			end
			if currentLevel.platform.indexRightAvailable ~= 0 and 
			currentLevel.refBlock[b].index > currentLevel.platform.indexRightAvailable then
				rightAvailable = rightAvailable + 1
			end
		end
	end
	currentLevel.platform.leftAvailable = leftAvailable
	currentLevel.platform.rightAvailable = rightAvailable
	gui.set_text(gui.get_node("left_block"), leftAvailable)

	gui.set_text(gui.get_node("right_block"), rightAvailable)
	self.is_available_left = false
	self.is_not_available_left = false
	self.is_available_right = false
	self.is_not_available_right = false

	if currentLevel.platform.leftAvailable > 0 and not self.is_available_left then
		self.is_available_left = true
		self.is_not_available_left = false
		gui.set_color(gui.get_node("left_available"), vmath.vector4(1, 1, 1, 1))
		gui.set_color(gui.get_node("left_block"), vmath.vector4(83/255, 106/255, 134/255, 1))
	end

	if currentLevel.platform.leftAvailable == 0 and not self.is_not_available_left then
		self.is_available_left = false
		self.is_not_available_left = true
		gui.set_color(gui.get_node("left_available"), vmath.vector4(255/255, 220/255, 189/255, 1))
		gui.set_color(gui.get_node("left_block"), vmath.vector4(131/255, 65/255, 6/255, 1))
	end

	if currentLevel.platform.rightAvailable > 0 and not self.is_available_right then
		self.is_available_right = true
		self.is_not_available_right = false
		gui.set_color(gui.get_node("right_available"), vmath.vector4(1, 1, 1, 1))
		gui.set_color(gui.get_node("right_block"), vmath.vector4(83/255, 106/255, 134/255, 1))
	end

	if currentLevel.platform.rightAvailable == 0 and not self.is_not_available_right  then
		self.is_available_right = false
		self.is_not_available_right = true
		gui.set_color(gui.get_node("right_available"), vmath.vector4(255/255, 220/255, 189/255, 1))
		gui.set_color(gui.get_node("right_block"), vmath.vector4(131/255, 65/255, 6/255, 1))
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if (gui.pick_node(gui.get_node("left_available"), action.x, action.y) or
		gui.pick_node(gui.get_node("left_touchable"), action.x, action.y)) and 
		not currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone and
		not currentLevel.platform.stopGame and
		not currentLevel.platform.slider.dragBlock and
		not currentLevel.platform.slider.isSlideLeftRight and
		currentLevel.platform.rightAvailable ~= 0 then
			gui.set_scale(gui.get_node("left_available"), vmath.vector3(1))
			gui.animate(gui.get_node("left_available"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			currentLevel.platform.slider.directionSlider = -1
			currentLevel.platform.actionReleased = true
			currentLevel.platform.slider.isSlideLeftRight = true

			if currentLevel.platform.rightAvailable == 0 then
				currentLevel.platform.averageSlid = 0
			end
			if currentLevel.platform.rightAvailable == 1 then
				currentLevel.platform.distance = 400
				currentLevel.platform.averageSlid = (((currentLevel.selectionBlock[2].l1.x + currentLevel.selectionBlock[2].l0.x) / 2) - ((currentLevel.selectionBlock[1].l1.x + currentLevel.selectionBlock[1].l0.x) / 2))
			end
			if currentLevel.platform.rightAvailable > 1 then
				currentLevel.platform.distance = 800
				currentLevel.platform.averageSlid = (((currentLevel.selectionBlock[3].l1.x + currentLevel.selectionBlock[3].l0.x) / 2) - ((currentLevel.selectionBlock[1].l1.x + currentLevel.selectionBlock[1].l0.x) / 2))
			end
			currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = true

			currentLevel.platform.actionDx = 0
			currentLevel.platform.actionDy = 0

			currentLevel.platform.slider.isTouchSlide = false
			currentLevel.platform.isDragUp = false
			currentLevel.platform.slider.positionStartLeftRight = vmath.vector3(0, 0, 0)
			currentLevel.platform.slider.positionTouchSlide = vmath.vector3(0, 0, 0)
			currentLevel.platform.slider.gapLeftRight = 0
		end
		
		if (gui.pick_node(gui.get_node("right_available"), action.x, action.y) or
		gui.pick_node(gui.get_node("right_touchable"), action.x, action.y)) and 
		not currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone and
		not currentLevel.platform.stopGame and
		not currentLevel.platform.slider.dragBlock and
		not currentLevel.platform.slider.isSlideLeftRight and
		currentLevel.platform.leftAvailable ~= 0 then
			gui.set_scale(gui.get_node("right_available"), vmath.vector3(1))
			gui.animate(gui.get_node("right_available"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			currentLevel.platform.slider.directionSlider = 1
			currentLevel.platform.actionReleased = true
			currentLevel.platform.slider.isSlideLeftRight = true

			if currentLevel.platform.leftAvailable == 0 then
				currentLevel.platform.averageSlid = 0
			end
			if currentLevel.platform.leftAvailable == 1 then
				currentLevel.platform.distance = 400
				currentLevel.platform.averageSlid = (((currentLevel.selectionBlock[2].l1.x + currentLevel.selectionBlock[2].l0.x) / 2) - ((currentLevel.selectionBlock[1].l1.x + currentLevel.selectionBlock[1].l0.x) / 2))
			end
			if currentLevel.platform.leftAvailable > 1 then
				currentLevel.platform.distance = 800
				currentLevel.platform.averageSlid = (((currentLevel.selectionBlock[3].l1.x + currentLevel.selectionBlock[3].l0.x) / 2) - ((currentLevel.selectionBlock[1].l1.x + currentLevel.selectionBlock[1].l0.x) / 2))
			end
			currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = true

			currentLevel.platform.actionDx = 0
			currentLevel.platform.actionDy = 0

			currentLevel.platform.slider.isTouchSlide = false
			currentLevel.platform.isDragUp = false
			currentLevel.platform.slider.positionStartLeftRight = vmath.vector3(0, 0, 0)
			currentLevel.platform.slider.positionTouchSlide = vmath.vector3(0, 0, 0)
			currentLevel.platform.slider.gapLeftRight = 0
		end
	end
end
local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
--local list = require("ressources.listLevel")
--local currentLevel = list[config.level].path
local currentLevel = require("levels.template")
local languages = require("ressources.langages")
local modifier = require("ressources.modifier")

function setViCadeauxFont(self)
	-- ZONE
	gui.set_font(gui.get_node("cadeaux_zone_actif"),  hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_zone_rule"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_zone_prendre"), hash("VI_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_zone"), hash("VI_30_border"))

	-- GROUP
	gui.set_font(gui.get_node("cadeaux_group_actif"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_group_rule"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_group_prendre"), hash("VI_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_group"), hash("VI_30_border"))

	-- TARGET
	gui.set_font(gui.get_node("cadeaux_target_actif"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_target_rule"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_target_prendre"), hash("VI_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_target"), hash("VI_30_border"))
	
	-- SUDOKU
	gui.set_font(gui.get_node("cadeaux_sudoku_actif"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_rule"), hash("VI_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_prendre"), hash("VI_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_sudoku"), hash("VI_30_border"))
end

function setKrCadeauxFont(self)
	-- ZONE
	gui.set_font(gui.get_node("cadeaux_zone_actif"),  hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_zone_rule"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_zone_prendre"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_zone"), hash("KR_30_border"))

	-- GROUP
	gui.set_font(gui.get_node("cadeaux_group_actif"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_group_rule"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_group_prendre"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_group"), hash("KR_30_border"))

	-- TARGET
	gui.set_font(gui.get_node("cadeaux_target_actif"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_target_rule"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_target_prendre"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_target"), hash("KR_30_border"))

	-- SUDOKU
	gui.set_font(gui.get_node("cadeaux_sudoku_actif"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_rule"), hash("KR_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_prendre"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_sudoku"), hash("KR_30_border"))
end

function setJaCadeauxFont(self)
	-- ZONE
	gui.set_font(gui.get_node("cadeaux_zone_actif"),  hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_zone_rule"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_zone_prendre"), hash("JA_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_zone"), hash("JA_30_border"))

	-- GROUP
	gui.set_font(gui.get_node("cadeaux_group_actif"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_group_rule"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_group_prendre"), hash("JA_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_group"), hash("JA_30_border"))

	-- TARGET
	gui.set_font(gui.get_node("cadeaux_target_actif"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_target_rule"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_target_prendre"), hash("JA_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_target"), hash("JA_30_border"))

	-- SUDOKU
	gui.set_font(gui.get_node("cadeaux_sudoku_actif"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_rule"), hash("JA_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_prendre"), hash("JA_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_sudoku"), hash("JA_30_border"))
end

function setRuCadeauxFont(self)
	-- ZONE
	gui.set_font(gui.get_node("cadeaux_zone_actif"),  hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_zone_rule"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_zone_prendre"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_zone"), hash("RU_30_border"))

	-- GROUP
	gui.set_font(gui.get_node("cadeaux_group_actif"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_group_rule"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_group_prendre"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_group"), hash("RU_30_border"))

	-- TARGET
	gui.set_font(gui.get_node("cadeaux_target_actif"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_target_rule"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_target_prendre"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_target"), hash("RU_30_border"))
	
	-- SUDOKU
	gui.set_font(gui.get_node("cadeaux_sudoku_actif"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_sudoku_rule"), hash("RU_22"))
	gui.set_font(gui.get_node("cadeaux_sudoku_prendre"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_sudoku"), hash("RU_30_border"))
end

function setArbCadeauxFont(self)
	-- ZONE
	gui.set_font(gui.get_node("cadeaux_zone_actif"),  hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_zone_rule"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_zone_prendre"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_zone"), hash("ARB_35_border"))

	-- GROUP
	gui.set_font(gui.get_node("cadeaux_group_actif"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_group_rule"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_group_prendre"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_group"), hash("ARB_35_border"))

	-- TARGET
	gui.set_font(gui.get_node("cadeaux_target_actif"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_target_rule"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_target_prendre"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_target"), hash("ARB_35_border"))

	-- SUDOKU
	gui.set_font(gui.get_node("cadeaux_sudoku_actif"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_rule"), hash("ARB_25"))
	gui.set_font(gui.get_node("cadeaux_sudoku_prendre"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_sudoku"), hash("ARB_35_border"))
end

function setLatineCadeauxFont(self)
	-- ZONE
	gui.set_font(gui.get_node("cadeaux_zone_actif"),  hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_zone_rule"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_zone_prendre"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_zone"), hash("PoetsenOne40_border"))

	-- GROUP
	gui.set_font(gui.get_node("cadeaux_group_actif"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_group_rule"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_group_prendre"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_group"), hash("PoetsenOne40_border"))

	-- TARGET
	gui.set_font(gui.get_node("cadeaux_target_actif"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_target_rule"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_target_prendre"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_target"), hash("PoetsenOne40_border"))

	-- SUDOKU
	gui.set_font(gui.get_node("cadeaux_sudoku_actif"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_sudoku_rule"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("cadeaux_sudoku_prendre"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_prendre_cadeaux_sudoku"), hash("PoetsenOne40_border"))
end

function setTxtCadeauxArabic(self)
	-- ZONE
	gui.set_text(gui.get_node("cadeaux_zone_actif"), modifier.modifierToArab(languages[config.game_language].label_active_cadeaux_zone))
	gui.set_text(gui.get_node("cadeaux_zone_rule"),  modifier.modifierToArab(languages[config.game_language].label_rule_cadeaux_zone))
	gui.set_text(gui.get_node("cadeaux_zone_prendre"),  modifier.modifierToArab(languages[config.game_language].label_prendre_cadeaux))
	gui.set_text(gui.get_node("txt_prendre_cadeaux_zone"),  modifier.modifierToArab(languages[config.game_language].label_button_prendre))

	-- GROUP
	gui.set_text(gui.get_node("cadeaux_group_actif"),  modifier.modifierToArab(languages[config.game_language].label_active_cadeaux_group))
	gui.set_text(gui.get_node("cadeaux_group_rule"),  modifier.modifierToArab(languages[config.game_language].label_rule_cadeaux_group))
	gui.set_text(gui.get_node("cadeaux_group_prendre"),  modifier.modifierToArab(languages[config.game_language].label_prendre_cadeaux))
	gui.set_text(gui.get_node("txt_prendre_cadeaux_group"),  modifier.modifierToArab(languages[config.game_language].label_button_prendre))

	-- TARGET
	gui.set_text(gui.get_node("cadeaux_target_actif"),  modifier.modifierToArab(languages[config.game_language].label_active_cadeaux_target))
	gui.set_text(gui.get_node("cadeaux_target_rule"),  modifier.modifierToArab(languages[config.game_language].label_rule_cadeaux_target))
	gui.set_text(gui.get_node("cadeaux_target_prendre"),  modifier.modifierToArab(languages[config.game_language].label_prendre_cadeaux))
	gui.set_text(gui.get_node("txt_prendre_cadeaux_target"),  modifier.modifierToArab(languages[config.game_language].label_button_prendre))

	-- SUDOKU
	gui.set_text(gui.get_node("cadeaux_sudoku_actif"),  modifier.modifierToArab(languages[config.game_language].label_active_cadeaux_sudoku))
	gui.set_text(gui.get_node("cadeaux_sudoku_rule"),  modifier.modifierToArab(languages[config.game_language].label_rule_cadeaux_sudoku))
	gui.set_text(gui.get_node("cadeaux_sudoku_prendre"),  modifier.modifierToArab(languages[config.game_language].label_prendre_cadeaux))
	gui.set_text(gui.get_node("txt_prendre_cadeaux_sudoku"),  modifier.modifierToArab(languages[config.game_language].label_button_prendre))
end

function setTxtCadeauxForAll(self)
	-- ZONE
	gui.set_text(gui.get_node("cadeaux_zone_actif"), languages[config.game_language].label_active_cadeaux_zone)
	gui.set_text(gui.get_node("cadeaux_zone_rule"), languages[config.game_language].label_rule_cadeaux_zone)
	gui.set_text(gui.get_node("cadeaux_zone_prendre"), languages[config.game_language].label_prendre_cadeaux)
	gui.set_text(gui.get_node("txt_prendre_cadeaux_zone"), languages[config.game_language].label_button_prendre)

	-- GROUP
	gui.set_text(gui.get_node("cadeaux_group_actif"), languages[config.game_language].label_active_cadeaux_group)
	gui.set_text(gui.get_node("cadeaux_group_rule"), languages[config.game_language].label_rule_cadeaux_group)
	gui.set_text(gui.get_node("cadeaux_group_prendre"), languages[config.game_language].label_prendre_cadeaux)
	gui.set_text(gui.get_node("txt_prendre_cadeaux_group"), languages[config.game_language].label_button_prendre)

	-- TARGET
	gui.set_text(gui.get_node("cadeaux_target_actif"), languages[config.game_language].label_active_cadeaux_target)
	gui.set_text(gui.get_node("cadeaux_target_rule"), languages[config.game_language].label_rule_cadeaux_target)
	gui.set_text(gui.get_node("cadeaux_target_prendre"), languages[config.game_language].label_prendre_cadeaux)
	gui.set_text(gui.get_node("txt_prendre_cadeaux_target"), languages[config.game_language].label_button_prendre)

	-- SUDOKU
	gui.set_text(gui.get_node("cadeaux_sudoku_actif"), languages[config.game_language].label_active_cadeaux_sudoku)
	gui.set_text(gui.get_node("cadeaux_sudoku_rule"), languages[config.game_language].label_rule_cadeaux_sudoku)
	gui.set_text(gui.get_node("cadeaux_sudoku_prendre"), languages[config.game_language].label_prendre_cadeaux)
	gui.set_text(gui.get_node("txt_prendre_cadeaux_sudoku"), languages[config.game_language].label_button_prendre)
end

function manageStartPopupCadeaux()
	if currentLevel.platform.stopGame and config.level == 3 and not config.enable_adjacent then
		timer.delay(3, false, function() 
			gui.set_enabled(gui.get_node("overlay_zone"), true)
			gui.set_enabled(gui.get_node("popup_cadeaux_zone"), true)
		end)
	end
	if currentLevel.platform.stopGame and config.level == 4 and not config.enable_target then
		timer.delay(3, false, function() 
			gui.set_enabled(gui.get_node("overlay_target"), true)
			gui.set_enabled(gui.get_node("popup_cadeaux_target"), true)
		end)
	end
	if currentLevel.platform.stopGame and config.level == 5 and not config.enable_group then
		timer.delay(3, false, function() 
			gui.set_enabled(gui.get_node("overlay_group"), true)
			gui.set_enabled(gui.get_node("popup_cadeaux_group"), true)
		end)
	end
	if currentLevel.platform.stopGame and config.level == 6 and not config.enable_sudoku then
		timer.delay(3, false, function() 
			gui.set_enabled(gui.get_node("overlay_sudoku"), true)
			gui.set_enabled(gui.get_node("popup_cadeaux_sudoku"), true)
		end)
	end
end

function manageCadeauxLg(self)
	if config.game_language == "ru" or config.game_language == "be" then
		setRuCadeauxFont(self)
	end
	if config.game_language == "ar" then
		setArbCadeauxFont(self)
	end
	if config.game_language == "ja" then
		setJaCadeauxFont(self)
	end
	if config.game_language == "ko" then
		setKrCadeauxFont(self)
	end
	if config.game_language == "vi" then
		setViCadeauxFont(self)
	end
	if config.game_language == "fr" or 
	config.game_language == "en" or 
	config.game_language == "es" or 
	config.game_language == "de" or 
	config.game_language == "pt" or 
	config.game_language == "pl" or 
	config.game_language == "nl" or 
	config.game_language == "tr" or 
	config.game_language == "it" or 
	config.game_language == "id" then
		setLatineCadeauxFont(self)
	end
	if config.game_language == "ar" then
		setTxtCadeauxArabic(self)
	else
		setTxtCadeauxForAll(self)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	manageCadeauxLg(self)
	manageStartPopupCadeaux()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function receiveCadeauxSound(self)
	local soundcadeauxIsActive = sys.load(ryoku_path)
	if soundcadeauxIsActive.sound then
		sound.play("/sound#receive_bonus", {delay = 0, gain = soundcadeauxIsActive.gainAction})
	end
end

function useValidationButton(self)
	local useValidationButtonIsActive = sys.load(ryoku_path)
	if useValidationButtonIsActive.sound then
		sound.play("/sound#validation_button", {delay = 0, gain = useValidationButtonIsActive.gainSelection})
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		-- Zone Popup
		if gui.pick_node(gui.get_node("zone_close_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_zone")) then
			currentLevel.platform.stopGame = false
			useValidationButton(self)
			gui.set_enabled(gui.get_node("overlay_zone"), false)
			gui.set_enabled(gui.get_node("popup_cadeaux_zone"), false)
		end
		if gui.pick_node(gui.get_node("zone_recharge_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_zone")) then
			receiveCadeauxSound(self)
			gui.set_scale(gui.get_node("zone_recharge_cadeaux"), vmath.vector3(1))
			gui.animate(gui.get_node("zone_recharge_cadeaux"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				currentLevel.platform.stopGame = false
				local saveAdjacent = sys.load(ryoku_path)
				saveAdjacent.adjacent = saveAdjacent.adjacent + 1
				if sys.save(ryoku_path, saveAdjacent) then
					msg.post("/powerup#powerup", "increment_zone")
					gui.set_enabled(gui.get_node("overlay_zone"), false)
					gui.set_enabled(gui.get_node("popup_cadeaux_zone"), false)
				end
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		-- Target Popup
		if gui.pick_node(gui.get_node("target_close_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_target")) then
			currentLevel.platform.stopGame = false
			useValidationButton(self)
			gui.set_enabled(gui.get_node("overlay_target"), false)
			gui.set_enabled(gui.get_node("popup_cadeaux_target"), false)
			gui.set_visible(gui.get_node("popup_cadeaux_target"), false)
		end
		if gui.pick_node(gui.get_node("target_recharge_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_target")) then
			receiveCadeauxSound(self)
			gui.set_scale(gui.get_node("target_recharge_cadeaux"), vmath.vector3(1))
			gui.animate(gui.get_node("target_recharge_cadeaux"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				currentLevel.platform.stopGame = false
				local saveTarget = sys.load(ryoku_path)
				saveTarget.target = saveTarget.target + 1
				if sys.save(ryoku_path, saveTarget) then
					msg.post("/powerup#powerup", "increment_target")
					gui.set_enabled(gui.get_node("overlay_target"), false)
					gui.set_enabled(gui.get_node("popup_cadeaux_target"), false)
					gui.set_visible(gui.get_node("popup_cadeaux_target"), false)
				end
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		-- Group Popup
		if gui.pick_node(gui.get_node("group_close_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_group")) then
			currentLevel.platform.stopGame = false
			useValidationButton(self)
			gui.set_enabled(gui.get_node("overlay_group"), false)
			gui.set_enabled(gui.get_node("popup_cadeaux_group"), false)
			gui.set_visible(gui.get_node("popup_cadeaux_group"), false)
		end
		if gui.pick_node(gui.get_node("group_recharge_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_group")) then
			receiveCadeauxSound(self)
			gui.set_scale(gui.get_node("group_recharge_cadeaux"), vmath.vector3(1))
			gui.animate(gui.get_node("group_recharge_cadeaux"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				currentLevel.platform.stopGame = false
				local saveGroup = sys.load(ryoku_path)
				saveGroup.group = saveGroup.group + 1
				if sys.save(ryoku_path, saveGroup) then
					msg.post("/powerup#powerup", "increment_group")
					gui.set_enabled(gui.get_node("overlay_group"), false)
					gui.set_enabled(gui.get_node("popup_cadeaux_group"), false)
					gui.set_visible(gui.get_node("popup_cadeaux_group"), false)
				end
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		-- SUDOKU Popup
		if gui.pick_node(gui.get_node("sudoku_close_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_sudoku")) then
			currentLevel.platform.stopGame = false
			useValidationButton(self)
			gui.set_enabled(gui.get_node("overlay_sudoku"), false)
			gui.set_enabled(gui.get_node("popup_cadeaux_sudoku"), false)
			gui.set_visible(gui.get_node("popup_cadeaux_sudoku"), false)
		end
		if gui.pick_node(gui.get_node("sudoku_recharge_cadeaux"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_cadeaux_sudoku")) then
			receiveCadeauxSound(self)
			gui.set_scale(gui.get_node("sudoku_recharge_cadeaux"), vmath.vector3(1))
			gui.animate(gui.get_node("sudoku_recharge_cadeaux"), gui.PROP_SCALE, vmath.vector3(0.8), gui.EASING_INOUTQUAD, 0.2, 0, function(self, node)
				currentLevel.platform.stopGame = false
				local saveSudoku = sys.load(ryoku_path)
				saveSudoku.sudoku = saveSudoku.sudoku + 1
				if sys.save(ryoku_path, saveSudoku) then
					msg.post("/powerup#powerup", "increment_sudoku")
					gui.set_enabled(gui.get_node("overlay_sudoku"), false)
					gui.set_enabled(gui.get_node("popup_cadeaux_sudoku"), false)
					gui.set_visible(gui.get_node("popup_cadeaux_sudoku"), false)
				end
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

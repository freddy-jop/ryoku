local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
local currentLevel = require("levels.template")
local languages = require("ressources.langages")
local modifier = require("ressources.modifier")

function goHome(self)
	gui.set_enabled(gui.get_node("overlay_home"), false)
	gui.set_enabled(gui.get_node("popup_go_home"), false)
	timer.delay(1, false, function() 
		currentLevel.platform.stopGame = false
		msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
	end)
end

function setHomeRuFont(self)
	gui.set_font(gui.get_node("txt_for_validation"), hash("RU_22"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("RU_30_border"))
end

function setHomeArbFont(self)
	gui.set_font(gui.get_node("txt_for_validation"), hash("ARB_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("ARB_35_border"))
end

function setHomeJaFont(self)
	gui.set_font(gui.get_node("txt_for_validation"), hash("JA_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("JA_30_border"))
end

function setHomeKrFont(self)
	gui.set_font(gui.get_node("txt_for_validation"), hash("KR_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("KR_30_border"))
end

function setHomeViFont(self)
	gui.set_font(gui.get_node("txt_for_validation"), hash("VI_25"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("VI_30_border"))
end

function setHomeLatineFont(self)
	gui.set_font(gui.get_node("txt_for_validation"), hash("PoetsenOne22"))
	gui.set_font(gui.get_node("txt_home_consent"), hash("PoetsenOne40_border"))
end

function setTxtHomeArabic(self)
	gui.set_text(gui.get_node("txt_for_validation"), modifier.modifierToArab(languages[config.game_language].txt_for_validation))
	gui.set_text(gui.get_node("txt_home_consent"), modifier.modifierToArab(languages[config.game_language].txt_home_consent))
end

function setTxtHomeForAll(self)
	gui.set_text(gui.get_node("txt_for_validation"),languages[config.game_language].txt_for_validation)
	gui.set_text(gui.get_node("txt_home_consent"), languages[config.game_language].txt_home_consent)
end

function init(self)
	if config.game_language == "ru" or config.game_language == "be" then
		setHomeRuFont(self)
	end
	if config.game_language == "ar" then
		setHomeArbFont(self)
	end
	if config.game_language == "ja" then
		setHomeJaFont(self)
	end
	if config.game_language == "ko" then
		setHomeKrFont(self)
	end
	if config.game_language == "vi" then
		setHomeViFont(self)
	end
	if config.game_language == "fr" or 
	config.game_language == "en" or 
	config.game_language == "es" or 
	config.game_language == "de" or 
	config.game_language == "pt" or 
	config.game_language == "pl" or 
	config.game_language == "nl" or 
	config.game_language == "tr" or 
	config.game_language == "it" or 
	config.game_language == "id" then
		setHomeLatineFont(self)
	end
	if config.game_language == "ar" then
		setTxtHomeArabic(self)
	else
		setTxtHomeForAll(self)
	end
	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("go_back"), action.x, action.y) and not currentLevel.platform.stopGame then
			gui.animate(gui.get_node("back_go_home"), "color.w", 1, gui.EASING_INOUTQUAD, 0.8, 0, function(self, node)
				currentLevel.platform.stopGame = true
				gui.set_enabled(gui.get_node("overlay_home"), true)
				gui.set_enabled(gui.get_node("popup_go_home"), true)
			end, gui.PLAYBACK_ONCE_PINGPONG)
		end
		if gui.pick_node(gui.get_node("home_validation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_go_home")) then
			goHome(self)
		end
		if gui.pick_node(gui.get_node("close_home_validation"), action.x, action.y) and gui.is_enabled(gui.get_node("popup_go_home")) then
			currentLevel.platform.stopGame = false
			gui.set_enabled(gui.get_node("overlay_home"), false)
			gui.set_enabled(gui.get_node("popup_go_home"), false)
		end
	end
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

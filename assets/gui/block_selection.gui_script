local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
--local list = require("ressources.listLevel")
--local currentLevel = list[config.level].path
local currentLevel = require("levels.template")
local languages = require("ressources.langages")

function selectCurrentRefblock(factoryId)
	for h=1, #currentLevel.refBlock do
		if currentLevel.refBlock[h].factoryBlockId == factoryId then
			return currentLevel.refBlock[h]
		end
	end
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	self.selection_1 = ""
	self.selection_2 = ""
	self.selection_3 = ""
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if currentLevel.selectionBlock[1].selectionFactoryBlockId ~= self.selection_1 and currentLevel.selectionBlock[1].selectionFactoryBlockId ~= "" then
		local selection1 = selectCurrentRefblock(currentLevel.selectionBlock[1].selectionFactoryBlockId)
		self.selection_1 = currentLevel.selectionBlock[1].selectionFactoryBlockId
		if selection1.isActive then
			gui.set_text(gui.get_node("set_selection_1"), selection1.blockNumber)
		end
	end
	if currentLevel.selectionBlock[2].selectionFactoryBlockId ~= self.selection_2 and currentLevel.selectionBlock[2].selectionFactoryBlockId ~= "" then
		local selection2 = selectCurrentRefblock(currentLevel.selectionBlock[2].selectionFactoryBlockId)
		self.selection_2 = currentLevel.selectionBlock[2].selectionFactoryBlockId
		if selection2.isActive then
			gui.set_text(gui.get_node("set_selection_2"),  selection2.blockNumber)
		end

	end
	if currentLevel.selectionBlock[3].selectionFactoryBlockId ~= self.selection_3 and currentLevel.selectionBlock[3].selectionFactoryBlockId ~= "" then
		local selection3 = selectCurrentRefblock(currentLevel.selectionBlock[3].selectionFactoryBlockId)
		self.selection_3 = currentLevel.selectionBlock[3].selectionFactoryBlockId
		if selection3.isActive then
			gui.set_text(gui.get_node("set_selection_3"), selection3.blockNumber)
		end
	end
	if currentLevel.selectionBlock[3].selectionFactoryBlockId ~= "" and currentLevel.platform.totalBlockAvailable == 2 then
		self.selection_3 = ""
		currentLevel.selectionBlock[3].selectionFactoryBlockId = ""
		gui.set_text(gui.get_node("set_selection_3"), "")
	end
	if currentLevel.selectionBlock[2].selectionFactoryBlockId ~= "" and currentLevel.platform.totalBlockAvailable == 1 then
		self.selection_2 = ""
		currentLevel.selectionBlock[2].selectionFactoryBlockId = ""
		gui.set_text(gui.get_node("set_selection_2"), "")
	end
	if currentLevel.selectionBlock[1].selectionFactoryBlockId ~= "" and currentLevel.platform.totalBlockAvailable == 0 then
		self.selection_1 = ""
		currentLevel.selectionBlock[1].selectionFactoryBlockId = ""
		gui.set_text(gui.get_node("set_selection_1"), "")
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

local dataLevel = sys.load_resource("/ressources/data_level.lua")
local data = assert(loadstring(dataLevel))
local list = require("levels.lists")

local ryoku_path = sys.get_save_file("ryoku", "data_level")

function selectLanguageByPrivateList(self)
	local privateList = {"fr","en","zh","hi","es","de","ru","pt","pl","nl","tr","it","ja","ko","vi","id","ar","da","fi","hu","is","no","sv"}
	local listLenght = table.getn(privateList)
	for i = 1, listLenght do
		if privateList[i] == sys.get_sys_info().language then
			return sys.get_sys_info().language
		end
		if i == listLenght then
			return "en"
		end
	end
end


function init(self)
	self.appData = sys.load(ryoku_path)
	if not next(self.appData) then
		local success = sys.save(ryoku_path, data())
		if success then
			self.appData = sys.load(ryoku_path)
			if self.appData.game_language == "" then
				self.appData.game_language = selectLanguageByPrivateList(self)
				sys.save(ryoku_path, self.appData)
			end
		end
	else
		self.appData.stopGame = false
		if self.appData.game_language ~= sys.get_sys_info().language then
			self.appData.game_language = selectLanguageByPrivateList(self)
			sys.save(ryoku_path, self.appData)
		end
		sys.save(ryoku_path, self.appData)
	end
	self.currentLevel = list.targetLevelByBlock(self.appData.level)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.949, 0.952, 0.956, 0) })
	msg.post(".", "corporate_to_start")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("corporate_to_start") then
		--local assertLevel = assert(loadstring(sys.load_resource("/levels/level"..self.appData.level..".lua")))
		--currentLevel = assertLevel()
		timer.delay(2, false, function()
			if self.currentLevel == nil then
				msg.post("controller:/loader#controller", "changeScene", { newScene = "seeYou" })
			else
				msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
			end
		end)
	end
end
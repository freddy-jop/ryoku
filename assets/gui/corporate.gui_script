--local currentLevel = require("levels.level1")
local dataLevel = sys.load_resource("/ressources/data_level.lua")
local data = assert(loadstring(dataLevel))
--local level = data()
local list = require("levels.lists")

local ryoku_path = sys.get_save_file("ryoku", "data_level")


function init(self)
	self.appData = sys.load(ryoku_path)
	if not next(self.appData) then
		local success = sys.save(ryoku_path, data())
		if success then
			self.appData = sys.load(ryoku_path)
			if self.appData.game_language ~= sys.get_sys_info().language then
				if sys.get_sys_info().language then
					self.appData.game_language = sys.get_sys_info().language
				else
					self.appData.game_language = sys.get_sys_info().device_language
				end
				sys.save(ryoku_path, self.appData)
			end
		end
	else
		self.appData.stopGame = false
		if self.appData.game_language ~= sys.get_sys_info().language then
			if sys.get_sys_info().language then
				self.appData.game_language = sys.get_sys_info().language
			else
				self.appData.game_language = sys.get_sys_info().device_language
			end
			sys.save(ryoku_path, self.appData)
		end
		--self.appData.game_language = "ar"

		sys.save(ryoku_path, self.appData)
	end
	self.currentLevel = list.targetLevelByBlock(self.appData.level)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.949, 0.952, 0.956, 0) })
	msg.post(".", "corporate_to_start")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("corporate_to_start") then
		--local assertLevel = assert(loadstring(sys.load_resource("/levels/level"..self.appData.level..".lua")))
		--currentLevel = assertLevel()
		timer.delay(6, false, function()
			if self.currentLevel == nil then
				msg.post("controller:/loader#controller", "changeScene", { newScene = "seeYou" })
			else
				msg.post("controller:/loader#controller", "changeScene", { newScene = "clickOnLevel" })
			end
		end)
	end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
local listLevel = require("levels.lists")
local patterGrid = listLevel.targetLevelByBlock(config.level)
local blockList = require("ressources.listBlocks")
local puzzle = require("construct.puzzles")
local colorList = require("construct.groupsColors")
local currentLevel = require("levels.template")
local blocksStart = blockList[#patterGrid].path
local languages = require("ressources.langages")
--local numberListBlock = require("ressources.listBlocksLevels")

local modifier = require("ressources.modifier")

local grid7x7 = require("levels.gridSimple7x7")
local region7x7 = require("levels.region7x7")

local grid9x9 = require("levels.gridSimple9x9")
local region9x9 = require("levels.region9x9")

local block12x12 = require("construct.block12")

-- dimensions du plateau de jeu
local width = 9
local height = 9

-- initialise un tableau vide pour le plateau de jeu
local board = {}
for i = 1, height do
	board[i] = {}
	for j = 1, width do
		board[i][j] = 0
	end
end

local matrice6x6 = {
	{0,0,0,0,0,0},
	{0,0,0,0,0,0},
	{0,0,0,0,0,0},
	{0,0,0,0,0,0},
	{0,0,0,0,0,0},
	{0,0,0,0,0,0}
}

local matrice7x7 = {
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0}
}

local matrice8x8 = {
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0}
}

local matrice9x9 = {
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0}
}

local matrice10x10 = {
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0}
}

local matrice12x12 = {
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0}
}

--matrice 9x9: len9
--r1 => 1
--c1 => 1
--matrice[r1][c1]
--rotation 90 droite:
--matrice[c1][r1-(len9+1)]
--rotation 180 droite
--matrice[r1-(len9+1)][c1-(len9+1)]
--rotation 270 droite
--matrice[c1-(len9+1)][r1-(len9+1)]

function generateNextLevel(listLevel)
	local nextLevel = math.random(1, #listLevel)

	local fragment = {listLevel[nextLevel][1],listLevel[nextLevel][2]-1}
	local getIndexLevel = listLevel[nextLevel][1]
	if listLevel[nextLevel][2]-1 == 0 then
		table.remove(listLevel,nextLevel)
	else
		table.remove(listLevel,nextLevel)
		table.insert(listLevel,nextLevel, fragment)
	end
	return getIndexLevel
end


function generateListLevel()
	local indexNumber = {{3,4},{4,20},{5,18},{6,150},{7,47},{8,109},{9,49},{10,121},{12,17}}
	local gridListLevel = {}

	math.randomseed(os.time())
	for i = 15, 548 do
		local fragmentLevel = {
			levelNumber = i,
			block = generateNextLevel(indexNumber)
		}
		table.insert(gridListLevel, fragmentLevel)
		pprint(json.encode(fragmentLevel))
		io.write("\n")
	end
	--pprint("====>> listLevel :::", listLevel)
	--pprint("====>> indexNumber :::", indexNumber)
	--pprint("====>> gridListLevel :::", #gridListLevel)
	--local testJsonList = json.encode(gridListLevel)
	--pprint("====> testJsonList ::: ", testJsonList)
end

function matrice90(st,ed)
	local blockList90 = {}
	print("=====> ", #block12x12)
	for i = 1, 5 do
		local newBlock90 = {
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0}
		}
		for j = 1, #block12x12[i] do
			for k = 1, #block12x12[i][j] do
				newBlock90[k][math.abs(j-(#block12x12[i][j] + 1))] = block12x12[i][j][k]
				if #block12x12[i] == j and #block12x12[i][j] == k then
					table.insert(blockList90, newBlock90)
				end
			end
		end
	end
	local testJson = json.encode(blockList90)
	pprint("====> testJson ::: ", testJson)
end

function matrice180(st,ed)
	local blockList180 = {}
	for i = 1, 5 do
		local newBlock180 = {
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0}
		}
		for j = 1, #block12x12[i] do
			for k = 1, #block12x12[i][j] do
				newBlock180[math.abs(j-(#block12x12[i][j] + 1))][math.abs(k-(#block12x12[i][j] + 1))] = block12x12[i][j][k]
				if #block12x12[i] == j and #block12x12[i][j] == k then
					table.insert(blockList180, newBlock180)
				end
			end
		end
	end
	local testJson = json.encode(blockList180)
	pprint("====> testJson ::: ", testJson)
end

function matrice270(st,ed)
	local blockList270 = {}
	for i = 1, 5 do
		local newBlock270 = {
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0}
		}
		for j = 1, #block12x12[i] do
			for k = 1, #block12x12[i][j] do
				newBlock270[math.abs(k-(#block12x12[i][j] + 1))][math.abs(j-(#block12x12[i][j] + 1))] = block12x12[i][j][k]
				if #block12x12[i] == j and #block12x12[i][j] == k then
					table.insert(blockList270, newBlock270)
				end
			end
		end
	end
	local testJson = json.encode(blockList270)
	pprint("====> testJson ::: ", testJson)
end

local pieces = {
	{
		{1,0,0},
		{1,0,0},
		{0,0,0}
	},
	{
		{1,1,0},
		{0,0,0},
		{0,0,0}
	},
	{
		{1,0,0},
		{1,1,0},
		{0,0,0}
	},
	{
		{1,1,0},
		{1,0,0},
		{0,0,0}
	},
	{
		{1,1,0},
		{0,1,0},
		{0,0,0}
	},
	{
		{0,1,0},
		{1,1,0},
		{0,0,0}
	},
	{
		{1,0,0},
		{1,0,0},
		{1,0,0}
	},
	{
		{1,1,1},
		{0,0,0},
		{0,0,0}
	},
	{
		{1,1,0},
		{0,1,1},
		{0,0,0}
	},
	{
		{1,0,0},
		{1,1,0},
		{0,1,0}
	},
	{
		{0,1,0},
		{1,1,0},
		{1,0,0}
	},
	{
		{0,1,1},
		{1,1,0},
		{0,0,0}
	},
	{
		{1,1,0},
		{1,1,0},
		{0,0,0}
	},
	{
		{1,0,0},
		{1,0,0},
		{1,1,0}
	},
	{
		{1,0,0},
		{1,1,1},
		{0,0,0}
	},
	{
		{0,1,0},
		{0,1,0},
		{1,1,0}
	},
	{
		{0,0,1},
		{1,1,1},
		{0,0,0}
	},
	{
		{1,1,0},
		{0,1,0},
		{0,1,0}
	},
	{
		{0,1,0},
		{1,1,1},
		{0,0,0}
	},
	{
		{0,1,0},
		{1,1,0},
		{0,1,0}
	},
	{
		{1,1,1},
		{0,1,0},
		{0,0,0}
	},
	{
		{0,1,0},
		{0,1,1},
		{0,1,0}
	},
	{
		{1,1,1},
		{1,0,1},
		{0,0,0}
	},
	{
		{1,1,0},
		{1,0,0},
		{1,1,0}
	},
	{
		{1,0,1},
		{1,1,1},
		{0,0,0}
	},
	{
		{0,1,1},
		{0,0,1},
		{0,1,1}
	},
	{
		{1,0,0},
		{1,1,0},
		{0,1,1}
	},
	{
		{0,0,1},
		{0,1,1},
		{1,1,0}
	},
	{
		{1,1,0},
		{0,1,1},
		{0,0,1}
	},
	{
		{0,1,1},
		{1,1,0},
		{1,0,0}
	},
	{
		{0,1,0},
		{1,1,0},
		{1,1,0}
	},
	{
		{1,1,1},
		{0,1,1},
		{0,0,0}
	},
	{
		{1,1,0},
		{1,1,0},
		{1,0,0}
	},
	{
		{1,1,0},
		{1,1,1},
		{0,0,0}
	},
	{
		{0,1,0},
		{1,1,1},
		{0,1,0}
	},
	{
		{0,1,1},
		{1,1,0},
		{0,1,0}
	},
	{
		{1,0,0},
		{1,1,1},
		{0,1,0}
	},
	{
		{0,1,0},
		{0,1,1},
		{1,1,0}
	},
	{
		{0,1,0},
		{1,1,1},
		{0,0,1}
	},
	{
		{1,1,0},
		{0,1,1},
		{0,1,0}
	},
	{
		{0,1,0},
		{0,1,0},
		{1,1,1}
	},
	{
		{0,0,1},
		{1,1,1},
		{0,0,1}
	},
	{
		{1,1,1},
		{0,1,0},
		{0,1,0}
	},
	{
		{1,0,0},
		{1,1,1},
		{1,0,0}
	}
}

-- fonction pour afficher le plateau de jeu
function printBoard()
	for i = 1, height do
		for j = 1, width do
			io.write(board[i][j] .. " ")
		end
		io.write("\n")
	end
end

-- fonction pour vérifier si une pièce peut être placée sur le plateau
function canPlacePiece(piece, x, y)
	for i = 1, #piece do
		for j = 1, #piece[1] do
			if piece[i][j] == 1 then
				local boardX = x + j - 1
				local boardY = y + i - 1
				if boardX < 1 or boardX > width or boardY > height or board[boardY][boardX] ~= 0 then
					return false
				end
			end
		end
	end
	return true
end

function resolve()
	for m = 1, #board do
		for p = 1, #board[m] do
			if board[m][p] == 0 then
				return false
			end
			if #board == m and #board[m] == p then
				return true
			end
		end
	end
end

-- fonction pour placer une pièce sur le plateau
function placePiece(piece, x, y)
	for i = 1, #piece do
		for j = 1, #piece[1] do
			if piece[i][j] == 1 then
				board[y+i-1][x+j-1] = y
			end
		end
	end
end
function manageBlockRang()
	-- boucle de jeu principale
	while true do
		-- choisit une pièce au hasard dans la liste
		math.randomseed(os.time())
		local piece = pieces[math.random(#pieces)]

		-- choisit une position au hasard pour la pièce
		math.randomseed(os.time())
		local x = math.random(width - #piece[1] + 1)
		local y = 1

		-- descend la pièce sur le plateau de jeu jusqu'à ce qu'elle ne puisse plus être descendue
		while canPlacePiece(piece, x, y+1) do
			y = y + 1
		end

		-- place la pièce sur le plateau de jeu
		placePiece(piece, x, y)

		-- affiche le plateau de jeu
		--if resolve() then
			printBoard()
		--end
		
		-- attend un peu avant de continuer
		--os.execute("sleep " .. tonumber(0.5))
	end
end


function matrice7x7()
	local matriceList = {}
	for i = 8, 12 do
		local newMatrice = {}
		for j = 1, #grid9x9[i] do
			local newLine = {}
			for k = 1, #grid9x9[i][j] do
				local newBlock = {}
				newBlock[1] = grid9x9[i][j][k]
				newBlock[2] = region9x9[i][j][k]
				
				table.insert(newLine, newBlock)
				if #grid9x9[i][j] == k then
					table.insert(newMatrice, newLine)
				end
				if #grid9x9[i] == j and #grid9x9[i][j] == k then
					table.insert(matriceList, newMatrice)
				end
			end
		end
	end
	local testJson = json.encode(matriceList)
	pprint("====> testJson ::: ", testJson)
end

function print_grid(grid)
	for i = 1, #grid do
		for j = 1, #grid[i] do
			io.write(grid[i][j] .. " ")
		end
		io.write("\n")
	end
end

function scaleColumnGrid(columnDimension)
	if columnDimension == 3 then
		currentLevel.platform.blockHeight = 300
		return 1.25
	end
	if columnDimension == 4 then
		currentLevel.platform.blockHeight = 330
		return 0.9375
	end
	if columnDimension == 5 then
		currentLevel.platform.blockHeight = 340
		return 0.75
	end
	if columnDimension == 6 then
		currentLevel.platform.blockHeight = 350
		return 0.625
	end
	if columnDimension == 7 then
		currentLevel.platform.blockHeight = 360
		return 0.535
	end
	if columnDimension == 8 then
		currentLevel.platform.blockHeight = 370
		return 0.468
	end
	if columnDimension == 9 then
		currentLevel.platform.blockHeight = 380
		return 0.416
	end
	if columnDimension == 10 then
		currentLevel.platform.blockHeight = 390
		return 0.375
	end
	if columnDimension == 12 then
		currentLevel.platform.blockHeight = 400
		--return 0.3125
		return 0.308
	end
	if columnDimension == 16 then
		currentLevel.platform.blockHeight = 370
		return 0.245
	end
end

function generateSelectionBlock(self)
	for w = 1, 3 do
		local selection = {
			selectionFactoryBlockId = "",
			positionSelectionBlock = vmath.vector3(0, 0, 0),
			blockNumber = w,
			l0 = vmath.vector3(0, 0, 0),
			l1 = vmath.vector3(0, 0, 0),
			r0 = vmath.vector3(0, 0, 0),
			r1 = vmath.vector3(0, 0, 0),
			limitBlockId = ""
		}
		table.insert(currentLevel.selectionBlock, selection)
	end
end

function initializeGrid(self)
	currentLevel.platform.slider.isTouchSlide = false
	currentLevel.platform.slider.isSlideLeftRight = false
	currentLevel.platform.slider.dragBlock = false
	currentLevel.platform.slider.whenPoseAndReplacingBlockIsDone = false
	currentLevel.platform.slider.isBlockMatch = false
	currentLevel.platform.isDragUp = false
	currentLevel.platform.isStartSlid = false
	currentLevel.platform.initialManageTarget = false
	currentLevel.platform.actionLostLevel = false
	currentLevel.platform.indexLeftAvailable = 0
	currentLevel.platform.indexRightAvailable = 0
	currentLevel.platform.isCollisionable = false
	currentLevel.platform.processing = false
	currentLevel.platform.slidToRight = false
	currentLevel.platform.slidToLeft = false
	currentLevel.platform.actionReleased = false
	currentLevel.platform.slider.directionSlider = 0
	currentLevel.platform.column = #patterGrid
	currentLevel.platform.scaleGrid = scaleColumnGrid(#patterGrid)
	--currentLevel.platform.listBlock = numberListBlock[config.level].listBlock
	currentLevel.platform.totalGroupDisplaying = 0
	currentLevel.platform.finaliseNextLevel = false
	currentLevel.platform.startChallenge = {}
	currentLevel.platform.randomChallenge = 0
	currentLevel.platform.stopGame = false
end

function defineDimensionNumber(currentBlock)
	local dimX = 0
	local dimY = 0

	for j = 1, #currentBlock do
		if currentBlock[j].blockX > dimX then
			dimX = currentBlock[j].blockX
		end
		if currentBlock[j].blockY > dimY then
			dimY = currentBlock[j].blockY
		end
		if #currentBlock == j then
			for k = 1, #puzzle do
				if puzzle[k].elevationX == dimX + 1 and puzzle[k].elevationY == dimY + 1 then
					return puzzle[k].number
				end
			end
		end
	end
end

function randomBlock(self)
	local blockListInsert = {}
	local refListInsert = {}

	local blockList = {}
	local refList = {}

	for i = 1, #self.fusionBlock do
		table.insert(blockList, i, self.fusionBlock[i])
	end

	math.randomseed(os.time())

	for z = 1, #self.fusionBlock do
		local hasard = math.random(1, #blockList)

		for b=1, #blockList[hasard] do
			blockList[hasard][b].blockNumber = z
			blockList[hasard][b].isPlaned = false
			blockList[hasard][b].isLocked = false
			blockList[hasard][b].isMatch = false
			blockList[hasard][b].isColored = false
			blockList[hasard][b].positionTileBlock = vmath.vector3(0, 0, 1)
			blockList[hasard][b].positionPlaned = vmath.vector3(0, 0, 1)
			blockList[hasard][b].positionReturn = vmath.vector3(0, 0, 1)
			blockList[hasard][b].numberRevealed = false
		end

		table.insert(refListInsert, {
			factoryBlockId = "",
			factoryTetrisId = "",
			blockNumber = z,
			positionBlock = vmath.vector3(0, 0, 0),
			isActive = true,
			x0 = 0,
			x1 = 0,
			y0 = 0,
			y1 = 0,
			originXY = vmath.vector3(0, 0, 0),
			index = z,
			l0 = vmath.vector3(0, 0, 0),
			l1 = vmath.vector3(0, 0, 0),
			isdisplaying = false,
			isPending = false,
			selectDimension = defineDimensionNumber(blockList[hasard])
		})
		
		table.insert(blockListInsert, blockList[hasard])
		
		table.remove(blockList, hasard)

		if #self.fusionBlock == z then
			currentLevel.blocks = blockListInsert
			currentLevel.refBlock = refListInsert
		end
	end
end

function withOutRandomBlock(self)
	local blockListInsert = {}
	local refListInsert = {}

	for i = 1, #self.fusionBlock do
		for b=1, #self.fusionBlock[i] do
			self.fusionBlock[i][b].blockNumber = i
			self.fusionBlock[i][b].isPlaned = false
			self.fusionBlock[i][b].isLocked = false
			self.fusionBlock[i][b].isMatch = false
			self.fusionBlock[i][b].isColored = false
			self.fusionBlock[i][b].positionTileBlock = vmath.vector3(0, 0, 1)
			self.fusionBlock[i][b].positionPlaned = vmath.vector3(0, 0, 1)
			self.fusionBlock[i][b].positionReturn = vmath.vector3(0, 0, 1)
			self.fusionBlock[i][b].numberRevealed = false
		end
		table.insert(refListInsert, {
			factoryBlockId = "",
			factoryTetrisId = "",
			blockNumber = i,
			positionBlock = vmath.vector3(0, 0, 0),
			isActive = true,
			x0 = 0,
			x1 = 0,
			y0 = 0,
			y1 = 0,
			originXY = vmath.vector3(0, 0, 0),
			index = i,
			l0 = vmath.vector3(0, 0, 0),
			l1 = vmath.vector3(0, 0, 0),
			isdisplaying = false,
			isPending = false,
			selectDimension = defineDimensionNumber(self.fusionBlock[i])
		})

		table.insert(blockListInsert, self.fusionBlock[i])
		--table.insert(blockList, i, self.fusionBlock[i])
		if #self.fusionBlock == i then
			currentLevel.blocks = blockListInsert
			currentLevel.refBlock = refListInsert
		end
	end
end

function generateChallenge(self)
	for i = 1, currentLevel.platform.column do
		for j = 1, currentLevel.platform.column do
			if i == 1 or i == currentLevel.platform.column or j == 1 or j == currentLevel.platform.column then
				table.insert(currentLevel.platform.startChallenge, {j, i})
			end
		end
	end
end

function randomChallenge(self)
	generateChallenge(self)
	math.randomseed(os.time())
	currentLevel.platform.randomChallenge = math.random(1,#currentLevel.platform.startChallenge)
end

function randomColor(self)
	local randomGroupColor = {}
	local groupSelect = {}
	local groupProgressSelect = {}

	for i = 1, #colorList do
		table.insert(randomGroupColor, i, colorList[i])
	end

	math.randomseed(os.time())
	for z = 1, currentLevel.platform.column do
		local hasardColor = math.random(1,#randomGroupColor)
		local group = {
			ispopulate = false,
			number = z,
			counterSquares = 0,
			groupTarget = false,
			isDisplayGroup = false,
			animateGroup = false,
			groupColorId = randomGroupColor[hasardColor].id
		}
		local groupProgress = {
			isCompleted = false,
			processGroup = false,
			number = 0,
			color = 0
		}

		table.insert(groupSelect, group)
		table.insert(groupProgressSelect, groupProgress)
		table.remove(randomGroupColor, hasardColor)
		
		if z == currentLevel.platform.column then
			currentLevel.groups = groupSelect
			currentLevel.groupProgress = groupProgressSelect
		end
	end
end

function calculateRelativePositionBlock(self, nbBlock)
	local minX = 18
	local minY = 18
	for k = 1, #self.fusionBlock[nbBlock.blockNumber] do
		if self.fusionBlock[nbBlock.blockNumber][k].result.tileX < minX then
			minX = self.fusionBlock[nbBlock.blockNumber][k].result.tileX
		end
		if self.fusionBlock[nbBlock.blockNumber][k].result.tileY < minY then
			minY = self.fusionBlock[nbBlock.blockNumber][k].result.tileY
		end
		if #self.fusionBlock[nbBlock.blockNumber] == k then
			for b = 1, #self.fusionBlock[nbBlock.blockNumber] do
				self.fusionBlock[nbBlock.blockNumber][b].blockX = self.fusionBlock[nbBlock.blockNumber][b].result.tileX - minX
				self.fusionBlock[nbBlock.blockNumber][b].blockY = self.fusionBlock[nbBlock.blockNumber][b].result.tileY - minY
			end
		end
	end
end

function generateTetrisBlock(self)
	for i = 1, #blocksStart[currentLevel.platform.listBlock] do
		for j = 1, #blocksStart[currentLevel.platform.listBlock][i] do
			local nbBlock = {
				blockX = 0,
				blockY = 0,
				positionOnGridX = -1,
				positionOnGridY = -1,
				numberRevealed = false,
				blockId = "",
				positionTileBlock = vmath.vector3(0, 0, 1),
				isPlaned = false,
				result = {
					tileX = j-1,
					tileY = i-1
				},
				positionPlaned = vmath.vector3(0, 0, 1),
				positionReturn= vmath.vector3(0, 0, 1),
				isColored = false,
				blockNumber = blocksStart[currentLevel.platform.listBlock][i][j],
				isLocked = false,
				isMatch = false,
				instanceId = ""
			}
			if self.fusionBlock[blocksStart[currentLevel.platform.listBlock][i][j]] == nil then
				self.fusionBlock[blocksStart[currentLevel.platform.listBlock][i][j]] = {}
			end
			table.insert(self.fusionBlock[blocksStart[currentLevel.platform.listBlock][i][j]], nbBlock)
			calculateRelativePositionBlock(self, nbBlock)
		end
	end
end

function findNumber(sudokuNumber)
	if sudokuNumber == 1 then
		return "one"
	end
	if sudokuNumber == 2 then
		return "two"
	end
	if sudokuNumber == 3 then
		return "three"
	end
	if sudokuNumber == 4 then
		return "four"
	end
	if sudokuNumber == 5 then
		return "five"
	end
	if sudokuNumber == 6 then
		return "six"
	end
	if sudokuNumber == 7 then
		return "seven"
	end
	if sudokuNumber == 8 then
		return "eight"
	end
	if sudokuNumber == 9 then
		return "nine"
	end
	if sudokuNumber == 10 then
		return "ten"
	end
	if sudokuNumber == 11 then
		return "eleven"
	end
	if sudokuNumber == 12 then
		return "twelve"
	end
	if sudokuNumber == 13 then
		return "thirteen"
	end
	if sudokuNumber == 14 then
		return "fourteen"
	end
	if sudokuNumber == 15 then
		return "fifteen"
	end
	if sudokuNumber == 16 then
		return "sixteen"
	end
end

function generateConformationGrid(self)
	for g = 1, #patterGrid do
		for q = 1, #patterGrid[g] do
			local tile = {
				positionX = q-1,
				positionY = g-1,
				color = vmath.vector4(),
				groupId = patterGrid[g][q][2],
				instanceId = "",
				xy = vmath.vector3(),
				gdXY = vmath.vector3(),
				isGrey = false,
				number = findNumber(patterGrid[g][q][1]),
				ispopulate = false,
				isGood = false,
				isPendingGood = false,
				instanceSquareId = "",
				target = false,
				revealed = false,
				sudokuRevealed = false,
				groupLocked = false,
				conformationName = "SIMPLE",
				blockNumber = 0,
				gridId = "",
				gridSpriteId = "",
				animateGroup = false,
				x0 = vmath.vector3(),
				x1 = vmath.vector3(),
				y0 = vmath.vector3(),
				y1 = vmath.vector3(),
				revelatedAdjacentBonus = false,
				urlBorderGroup = "",
				conformationBorderGroup = "",
				blockEntryInTile = false,
				isCollisionable = false
			}
			if self.conformationGrid[g] == nil then
				self.conformationGrid[g] = {}
			end
			table.insert(self.conformationGrid[g], tile)
			if #patterGrid == g and #patterGrid[g] == q then
				currentLevel.grid = self.conformationGrid
			end
		end
	end
end

function setStartLatineFont(self)
	gui.set_font(gui.get_node("number_level"), hash("PoetsenOne30_border"))
	gui.set_font(gui.get_node("start"), hash("PoetsenOne85_border"))
end

function setStartTxtForAll(self)
	local label_level = languages[config.game_language].label_indicator_level.."#"..config.level
	gui.set_text(gui.get_node("number_level"), label_level)
	gui.set_text(gui.get_node("start"), languages[config.game_language].label_start_level)
end

function setStartTxtArabic(self)
	local label_level = modifier.modifierToArab(languages[config.game_language].label_indicator_level).."#"..config.level
	gui.set_text(gui.get_node("number_level"), label_level)
	gui.set_text(gui.get_node("start"), modifier.modifierToArab(languages[config.game_language].label_start_level))
end

function setBlockNumberSudoku(grdY,grdX)
	for h = 1, #currentLevel.blocks do
		for g = 1, #currentLevel.blocks[h] do
			if currentLevel.blocks[h][g].result.tileY == grdY and currentLevel.blocks[h][g].result.tileX == grdX then
				currentLevel.blocks[h][g].numberRevealed = true
			end
		end
	end
end

function randomSudokuNumber(self)
	local column = #patterGrid
	local numberDisplaying = 0
	if column == 3 or column == 4 or column == 5 then
		numberDisplaying = 1
	end
	if column == 6 or column == 7 or column == 8 then
		numberDisplaying = 2
	end
	if column == 9 or column == 10 or column == 12 then
		numberDisplaying = 3
	end
	if column == 16 then
		numberDisplaying = 4
	end
	for i = 1, numberDisplaying do
		local gridY = math.random(1, column)
		local gridX = math.random(1, column)
		currentLevel.grid[gridY][gridX].sudokuRevealed = true
		setBlockNumberSudoku(gridY-1, gridX-1)
	end
end

function init(self)
	currentLevel.blocks = {}
	currentLevel.refBlock = {}
	currentLevel.grid = {}
	currentLevel.groupProgress = {}
	currentLevel.groups = {}
	currentLevel.selectionBlock = {}
	self.fusionBlock = {}
	self.conformationGrid = {}
	generateSelectionBlock(self)
	initializeGrid(self)
	if config.game_language  == "ru" or config.game_language  == "be" then
		gui.set_font(gui.get_node("number_level"), hash("RU_30_border"))
		gui.set_font(gui.get_node("start"), hash("RU_85_border"))
	end
	if config.game_language  == "ar" then
		gui.set_font(gui.get_node("number_level"), hash("ARB_35_border"))
		gui.set_font(gui.get_node("start"), hash("ARB_80_border"))
	end
	if config.game_language  == "ja" then
		gui.set_font(gui.get_node("number_level"), hash("JA_30_border"))
		gui.set_font(gui.get_node("start"), hash("JA_80_border"))
	end
	if config.game_language  == "ko" then
		gui.set_font(gui.get_node("number_level"), hash("KR_30_border"))
		gui.set_font(gui.get_node("start"), hash("KR_80_border"))
	end
	if config.game_language  == "vi" then
		gui.set_font(gui.get_node("number_level"), hash("VI_30_border"))
		gui.set_font(gui.get_node("start"), hash("VI_80_border"))
	end
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.949, 0.952, 0.956, 0) })
	msg.post(".", "acquire_input_focus")
	
	if config.game_language == "fr" or 
	config.game_language == "en" or 
	config.game_language == "es" or 
	config.game_language == "de" or 
	config.game_language == "pt" or 
	config.game_language == "pl" or 
	config.game_language == "nl" or 
	config.game_language == "tr" or 
	config.game_language == "it" or 
	config.game_language == "id" then
		setStartLatineFont(self)
	end
	if config.game_language == "ar" then
		setStartTxtArabic(self)
	else
		setStartTxtForAll(self)
	end
	
	generateConformationGrid(self)
	generateTetrisBlock(self)
	if config.level == 1 then
		withOutRandomBlock(self)
		table.insert(currentLevel.platform.startChallenge, {2,1})
	else
		randomBlock(self)
		randomChallenge(self)
	end
	randomColor(self)
	if config.level == 3 and not config.enable_adjacent then
		currentLevel.platform.stopGame = true
	end
	if config.level == 4 and not config.enable_target then
		currentLevel.platform.stopGame = true
	end
	if config.level == 5 and not config.enable_group then
		currentLevel.platform.stopGame = true
	end
	if config.level == 6 and not config.enable_sudoku then
		currentLevel.platform.stopGame = true
	end
	randomSudokuNumber(self)
	--matrice7x7()
	--manageBlockRang()
	--generateListLevel()
	
-- 	local pentominoes = {
-- 		{{0,0},{0,1},{1,0},{1,1},{2,0}},   -- F
-- 		{{0,0},{1,0},{2,0},{2,1},{2,2}},   -- I
-- 		{{0,0},{1,0},{1,1},{2,1},{2,2}},   -- L
-- 		{{0,0},{0,1},{1,1},{1,2},{2,2}},   -- N
-- 		{{0,0},{0,1},{0,2},{1,1},{2,1}},   -- P
-- 		{{0,0},{0,1},{0,2},{0,3},{1,1}},   -- T
-- 		{{0,0},{0,1},{0,2},{1,0},{2,0}},   -- U
-- 		{{0,0},{0,1},{0,2},{0,3},{0,4}}    -- V
-- 	}
-- 	-- Initialisation de la grille avec des zéros
-- 	local grid = {}
-- 	for i = 1, 8 do
-- 		grid[i] = {}
-- 		for j = 1, 8 do
-- 			grid[i][j] = 0
-- 		end
-- 	end
-- 
-- 	-- Placement des pièces pentomino dans la grille
-- 	for k = 1, #pentominoes do
-- 		local piece = pentominoes[k]
-- 		local num = k % 9   -- Utilisation des chiffres de 1 à 8 pour représenter les pièces
-- 		for i = 1, 8 do
-- 			for j = 1, 8 do
-- 				local fit = true
-- 				for l = 1, 5 do
-- 					local x = i + piece[l][1]
-- 					local y = j + piece[l][2]
-- 					if x < 1 or x > 8 or y < 1 or y > 8 or grid[x][y] ~= 0 then
-- 						fit = false
-- 						break
-- 					end
-- 				end
-- 				if fit then
-- 					for l = 1, 5 do
-- 						local x = i + piece[l][1]
-- 						local y = j + piece[l][2]
-- 						grid[x][y] = num
-- 					end
-- 					break
-- 				end
-- 			end
-- 		end
-- 	end
-- 
-- 	-- Affichage de la grille
-- 	print_grid(grid)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node(hash("start_level")), action.x, action.y) then
			local checkLife = sys.load(ryoku_path)
			if checkLife.life == 0 then
				msg.post("/life#life", "manage_getting_life")
			else
				msg.post("controller:/loader#controller", "changeScene", { newScene = "playLevel" })
			end
			
		end
	end
end
local ryoku_path = sys.get_save_file("ryoku", "data_level")
local config = sys.load(ryoku_path)
--local list = require("ressources.listLevel")
--local currentLevel = list[config.level].path
local currentLevel = require("levels.template")
function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	self.startProgression = true
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if currentLevel.platform.firstTileGrid.x ~= 0 and 
	currentLevel.platform.firstTileGrid.y ~= 0 and 
	self.startProgression then
		local gui_root=gui.get_node("root_progress")
		local horizon = currentLevel.platform.firstTileGrid.y + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid)*0.7)
		for i = 1, currentLevel.platform.column do
			local cloned_gui=gui.clone(gui_root)
			local x = currentLevel.platform.firstTileGrid.x + ((currentLevel.platform.sizeSquare * currentLevel.platform.scaleGrid) * (i-1))
			gui.set_position(cloned_gui, vmath.vector3(x,horizon,0))
			gui.set_scale(cloned_gui,vmath.vector3(currentLevel.platform.scaleGrid, currentLevel.platform.scaleGrid, 1))
			gui.set_id(cloned_gui, i)
		end
		gui.delete_node(gui_root)
		self.startProgression = false
	end

	if currentLevel.platform.handleManageTarget then
		for b = 1, #currentLevel.groupProgress do
			if currentLevel.groupProgress[b].isCompleted and not currentLevel.groupProgress[b].processGroup then
				local currNode = gui.get_node(b)
				local color = currentLevel.groupProgress[b].color
				gui.animate(currNode, gui.PROP_COLOR, vmath.vector4(color.x, color.y, color.z, 1), gui.EASING_INOUTQUAD, 0.4)
				gui.animate(currNode, gui.PROP_SCALE, 0.7, gui.EASING_INOUTQUART, 0.4, b/15, nil, gui.PLAYBACK_ONCE_PINGPONG)
				currentLevel.groupProgress[b].processGroup = true
			end
		end
		
	end
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
